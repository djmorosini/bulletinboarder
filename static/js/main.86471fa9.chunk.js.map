{"version":3,"sources":["Components/Lists.js","Components/Board.js","serviceWorker.js","index.js"],"names":["Lists","_this","this","props","list","listId","id","listName","react_default","a","createElement","key","onClick","addToList","concat","react_beautiful_dnd_esm","droppableId","provided","snapshot","className","ref","innerRef","style","isDraggingOver","background","display","padding","items","map","item","index","react","draggableId","Object","assign","draggableProps","dragHandleProps","isDragging","draggableStyle","objectSpread","userSelect","grid","margin","content","placeholder","Component","getItems","count","offset","arguments","length","undefined","Array","from","v","k","reorder","startIndex","endIndex","result","_result$splice","splice","removed","slicedToArray","move","source","destination","droppableSource","droppableDestination","sourceClone","destClone","_sourceClone$splice","newItemIndex","listNumber","droppableNumber","startAt","NewApp","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","createNewList","listArray","state","lists","newList","push","setState","id2List","defineProperty","listFrom","find","getList","onDragEnd","type","listTo","destinationArray","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","dresults","value","err","return","sourceArray","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","sresults","droppable1","droppable2","_this2","direction","droppableProps","Lists_Lists","Boolean","window","location","hostname","match","ReactDOM","render","Board_NewApp","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.86471fa9.chunk.js","sourcesContent":["import React, { Fragment, Component } from 'react';\r\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\r\n\r\nconst grid = 8;\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n  // some basic styles to make the items look a bit nicer\r\n  userSelect: 'none',\r\n  padding: grid * 2,\r\n  margin: `0 ${grid}px 0 0`,\r\n\r\n  // change background colour if dragging\r\n  background: isDragging ? 'lightgreen' : 'grey',\r\n\r\n  // styles we need to apply on draggables\r\n  ...draggableStyle\r\n});\r\n\r\nconst getListStyle = isDraggingOver => ({\r\n  background: isDraggingOver ? 'lightblue' : 'lightgrey',\r\n  display: 'flex',\r\n  padding: grid\r\n});\r\n\r\nexport default class Lists extends Component {\r\n\r\n  render() {\r\n    if (this.props.list) {\r\n      let list = this.props.list\r\n      let listId = list.id\r\n      let listName = list.listName\r\n\r\n      return (\r\n        <div key={listId}>\r\n          <button onClick={() => { this.props.addToList(`${listId}`) }}>Add to list {listName}</button>\r\n          <h1>{listName}</h1>\r\n          <Droppable droppableId={listId}>\r\n            {(provided, snapshot) => (\r\n              <div\r\n                className='my-lists'\r\n                ref={provided.innerRef}\r\n                style={getListStyle(snapshot.isDraggingOver)}>\r\n                {list.items.map((item, index) => (\r\n                  <Fragment key={index}>\r\n                    {item ?\r\n                      <Draggable\r\n                        key={item.id}\r\n                        draggableId={item.id}\r\n                        index={index}>\r\n                        {(provided, snapshot) => (\r\n                          <div\r\n                            className='item-style'\r\n                            ref={provided.innerRef}\r\n                            {...provided.draggableProps}\r\n                            {...provided.dragHandleProps}\r\n                            style={getItemStyle(\r\n                              snapshot.isDragging,\r\n                              provided.draggableProps.style\r\n                            )}>\r\n                            {item.content}\r\n                          </div>\r\n                        )}\r\n                      </Draggable> : <div className='no-items'></div>}\r\n                  </Fragment>\r\n                ))}\r\n                {provided.placeholder}\r\n              </div>\r\n            )}\r\n          </Droppable>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}","import React, { Fragment, Component } from 'react';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport Lists from './Lists'\r\n\r\n// fake data generator\r\nconst getItems = (count, offset = 0) =>\r\n  Array.from({ length: count }, (v, k) => k).map(k => ({\r\n    id: `item-${k + offset}`,\r\n    content: `item ${k + offset}`\r\n  }));\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n  const result = Array.from(list);\r\n  const [removed] = result.splice(startIndex, 1);\r\n  result.splice(endIndex, 0, removed);\r\n\r\n  return result;\r\n};\r\n\r\nconst move = (source, destination, droppableSource, droppableDestination) => {\r\n  const sourceClone = Array.from(source.items);\r\n  const destClone = Array.from(destination.items);\r\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n\r\n  destClone.splice(droppableDestination.index, 0, removed);\r\n\r\n  const result = {};\r\n  result[droppableSource.droppableId] = sourceClone;\r\n  result[droppableDestination.droppableId] = destClone;\r\n\r\n  return result;\r\n};\r\n\r\nlet newItemIndex = 0\r\nlet listNumber = 2\r\nlet droppableNumber = 3\r\nlet startAt = 3\r\n\r\nconst grid = 8;\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n  // some basic styles to make the items look a bit nicer\r\n  userSelect: 'none',\r\n  padding: grid * 2,\r\n  margin: `0 ${grid}px 0 0`,\r\n\r\n  // change background colour if dragging\r\n  background: isDragging ? 'lightgreen' : 'grey',\r\n\r\n  // styles we need to apply on draggables\r\n  ...draggableStyle\r\n});\r\n\r\nconst getListStyle = isDraggingOver => ({\r\n  background: isDraggingOver ? 'lightblue' : 'lightgrey',\r\n  display: 'flex',\r\n  padding: grid\r\n});\r\n\r\nexport default class NewApp extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.id2List = {\r\n      droppable1: 'newList0',\r\n      droppable2: 'newList1'\r\n    };\r\n    this.state = {\r\n      lists: [\r\n        { listName: 'newList0', id: 'droppable1', items: [{ id: `item-0`, content: `item 0` }, { id: `item-1`, content: `item 1` }] },\r\n        { listName: 'newList1', id: 'droppable2', items: [{ id: `item-2`, content: `item 2` }] }\r\n      ]\r\n    };\r\n  }\r\n\r\n  createNewList = listName => {\r\n    let listId = 'droppable' + droppableNumber\r\n    let items = getItems(1, startAt)\r\n\r\n    let listArray = this.state.lists\r\n    let newList = { listName: listName, id: listId, items: items }\r\n    listArray.push(newList)\r\n\r\n    this.setState({ lists: listArray })\r\n    this.id2List = { ...this.id2List, [listId]: listName }\r\n\r\n    droppableNumber++\r\n    startAt++\r\n    listNumber++\r\n  }\r\n\r\n  addToList = listFrom => {\r\n    newItemIndex++\r\n    listFrom = this.id2List[listFrom]\r\n    let lists = this.state.lists\r\n    const result = lists.find(list => list.listName === listFrom);\r\n    let items = result.items\r\n    items.push({ id: `new-item-${newItemIndex}`, content: `new content ${newItemIndex}` })\r\n    this.setState({ lists: lists.map(list => list.listName === listFrom ? Object.assign({ items: items }, list) : list) })\r\n  }\r\n\r\n  getList = id => {\r\n    let lists = this.state.lists\r\n    let listFrom = this.id2List[id]\r\n    let result = lists.find(list => list.listName === listFrom);\r\n    return result\r\n  };\r\n\r\n  onDragEnd = (result) => {\r\n    if (result.type === 'COLUMN') {\r\n      // dropped outside the list\r\n      if (!result.destination) {\r\n        return;\r\n      }\r\n\r\n      const lists = reorder(\r\n        this.state.lists,\r\n        result.source.index,\r\n        result.destination.index\r\n      );\r\n\r\n      this.setState({\r\n        lists: lists\r\n      });\r\n    } else {\r\n      const { source, destination } = result;\r\n\r\n      // dropped outside the list\r\n      if (!destination) {\r\n        return;\r\n      }\r\n\r\n      if (source.droppableId === destination.droppableId) {\r\n        const items = reorder(\r\n          this.getList(source.droppableId),\r\n          source.index,\r\n          destination.index\r\n        );\r\n\r\n        let listFrom = this.id2List[source.droppableId]\r\n        this.setState({ lists: this.state.lists.map(list => list.listName === listFrom ? Object.assign({ items: items }, list) : list) })\r\n\r\n      } else {\r\n        const result = move(\r\n          this.getList(source.droppableId),\r\n          this.getList(destination.droppableId),\r\n          source,\r\n          destination\r\n        );\r\n\r\n        let listFrom = this.id2List[source.droppableId]\r\n        let listTo = this.id2List[destination.droppableId]\r\n\r\n        let destinationArray = []\r\n        for (let dresults of result[destination.droppableId]) {\r\n          destinationArray.push(dresults)\r\n        }\r\n\r\n        let sourceArray = []\r\n        for (let sresults of result[source.droppableId]) {\r\n          sourceArray.push(sresults)\r\n        }\r\n\r\n        this.setState({\r\n          lists: this.state.lists.map(list => list.listName === listFrom ? list = {...list, items: sourceArray } :\r\n            list.listName === listTo ? list = {...list, items: destinationArray } : list)\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  // Normally you would want to split things out into separate components.\r\n  // But in this example everything is just done in one place for simplicity\r\n  render() {\r\n\r\n    return (\r\n      <Fragment>\r\n        <button onClick={() => { this.createNewList(`newlist${listNumber}`) }}>Add list</button>\r\n        <DragDropContext onDragEnd={this.onDragEnd}>\r\n          <Droppable droppableId=\"droppable\" direction=\"horizontal\" type='COLUMN'>\r\n            {(provided, snapshot) => (\r\n              <div\r\n                ref={provided.innerRef}\r\n                style={getListStyle(snapshot.isDraggingOver)}\r\n                {...provided.droppableProps}\r\n              >\r\n                {this.state.lists.map((list, index) => (\r\n                  <div className='list-wrap' key={list.id}>\r\n                    <Draggable draggableId={list.id} index={index}>\r\n                      {(provided, snapshot) => (\r\n                        <div\r\n                          className='list-style'\r\n                          ref={provided.innerRef}\r\n                          {...provided.draggableProps}\r\n                          {...provided.dragHandleProps}\r\n                          style={getItemStyle(\r\n                            snapshot.isDragging,\r\n                            provided.draggableProps.style\r\n                          )}\r\n                        >\r\n                          <Lists addToList={this.addToList} list={list} />\r\n                        </div>\r\n                      )}\r\n                    </Draggable>\r\n                  </div>\r\n                ))}\r\n                {provided.placeholder}\r\n              </div>\r\n            )}\r\n          </Droppable>\r\n        </DragDropContext>\r\n      </Fragment>\r\n    );\r\n  }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Board from './Components/Board'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Board />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}