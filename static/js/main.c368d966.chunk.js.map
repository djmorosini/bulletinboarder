{"version":3,"sources":["Components/InnerList.js","Components/Board.js","Components/App.js","serviceWorker.js","index.js"],"names":["InnerList","_this","this","list","props","listId","id","listName","react_default","a","createElement","key","onClick","popupSwitch","react_beautiful_dnd_esm","droppableId","provided","snapshot","className","ref","innerRef","style","isDraggingOver","background","padding","width","height","border","overflow","items","map","item","index","react","draggableId","Object","assign","draggableProps","dragHandleProps","isDragging","draggableStyle","objectSpread","userSelect","margin","content","placeholder","Component","listenForEnterKey","selector","callback","document","querySelector","addEventListener","e","callbackValue","value","textContent","reorder","startIndex","endIndex","result","_result$splice","Array","from","splice","removed","slicedToArray","move","source","destination","droppableSource","droppableDestination","sourceClone","destClone","_sourceClone$splice","Board","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","createNewList","droppableNumber","listArray","state","lists","newList","push","setState","switchListPopup","addToList","find","concat","itemIndex","getElementById","getList","onDragEnd","type","destinationArray","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","destResults","err","return","sourceArray","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","srcResults","display","listPopup","listNameInput","switchItemPopup","setCaretPosition","itemPopup","itemPopupInput","boardInfo","length","_this2","closeBoard","boardId","saveBoard","boardName","direction","flexWrap","alignSelf","droppableProps","InnerList_InnerList","elemId","caretPos","elem","createTextRange","range","select","focus","selectionStart","setSelectionRange","App","createBoard","name","switchBoardPopup","boards","newBoard","boardNumber","currentBoard","savedBoards","board","console","log","localStorage","getItem","JSON","parse","setItem","stringify","loadBoard","boardPopup","boardNameInput","lastBoardId","slice","parseInt","Board_Board","Boolean","window","location","hostname","match","ReactDOM","render","App_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c368d966.chunk.js","sourcesContent":["import React, { Fragment, Component } from 'react';\r\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n  // some basic styles to make the items look a bit nicer\r\n  userSelect: 'none',\r\n  padding: '16px',\r\n  margin: `0 0 4px 0`,\r\n  border: '1px solid black',\r\n  width: '200px',\r\n\r\n  // change background colour if dragging\r\n  background: isDragging ? 'lightgreen' : 'grey',\r\n\r\n  // styles we need to apply on draggables\r\n  ...draggableStyle\r\n});\r\n\r\nconst getListStyle = (isDraggingOver) => ({\r\n  background: isDraggingOver ? 'lightblue' : 'lightgrey',\r\n  padding: '8px',\r\n  width: '250px',\r\n  height: '370px',\r\n  border: '1px solid black',\r\n  overflow: 'auto'\r\n});\r\n\r\nexport default class InnerList extends Component {\r\n\r\n  render() {\r\n      let list = this.props.list\r\n      let listId = list.id\r\n      let listName = list.listName\r\n\r\n      return (\r\n        <div key={listId}>\r\n          <button onClick={() => { this.props.popupSwitch('block', listName, listId) }}>Add to {listName}</button>\r\n          <h1>{listName}</h1>\r\n          <Droppable droppableId={listId}>\r\n            {(provided, snapshot) => (\r\n              <div\r\n                className='my-lists'\r\n                ref={provided.innerRef}\r\n                style={getListStyle(snapshot.isDraggingOver)}>\r\n                {list.items.map((item, index) => (\r\n                  <Fragment key={index}>\r\n                    {item ?\r\n                      <Draggable\r\n                        key={item.id}\r\n                        draggableId={item.id}\r\n                        index={index}>\r\n                        {(provided, snapshot) => (\r\n                          <div\r\n                            className='item-style'\r\n                            ref={provided.innerRef}\r\n                            {...provided.draggableProps}\r\n                            {...provided.dragHandleProps}\r\n                            style={getItemStyle(\r\n                              snapshot.isDragging,\r\n                              provided.draggableProps.style\r\n                            )}>\r\n                            {item.content}\r\n                          </div>\r\n                        )}\r\n                      </Draggable> : <div className='no-items'></div>}\r\n                  </Fragment>\r\n                ))}\r\n                {provided.placeholder}\r\n              </div>\r\n            )}\r\n          </Droppable>\r\n        </div>\r\n      );\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport InnerList from './InnerList'\r\n\r\nconst listenForEnterKey = (selector, callback) => {\r\n  document.querySelector(selector).addEventListener('keypress', function (e) {\r\n    if (e.key === 'Enter') {\r\n      let callbackValue = document.querySelector(selector).value\r\n      if (selector === '#list-name-input') {\r\n        callback(callbackValue);\r\n      } else {\r\n        let listId = document.querySelector('#list-id').textContent\r\n        callback(listId, callbackValue);\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n  let result\r\n  if (list.items) {\r\n    result = Array.from(list.items)\r\n  } else {\r\n    result = Array.from(list);\r\n  }\r\n  const [removed] = result.splice(startIndex, 1);\r\n  result.splice(endIndex, 0, removed);\r\n\r\n  return result;\r\n};\r\n\r\nconst move = (source, destination, droppableSource, droppableDestination) => {\r\n  const sourceClone = Array.from(source.items);\r\n  const destClone = Array.from(destination.items);\r\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n\r\n  destClone.splice(droppableDestination.index, 0, removed);\r\n\r\n  const result = {};\r\n  result[droppableSource.droppableId] = sourceClone;\r\n  result[droppableDestination.droppableId] = destClone;\r\n\r\n  return result;\r\n};\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n  // some basic styles to make the items look a bit nicer\r\n  userSelect: 'none',\r\n  padding: '10px 10px 0 15px',\r\n  margin: `0 8px 0 0`,\r\n  height: '95%',\r\n  width: '280px',\r\n  border: '1px solid black',\r\n\r\n  // change background colour if dragging\r\n  background: isDragging ? 'lightgreen' : 'grey',\r\n\r\n  // styles we need to apply on draggables\r\n  ...draggableStyle\r\n});\r\n\r\nconst getListStyle = (isDraggingOver) => ({\r\n  background: isDraggingOver ? 'lightblue' : 'lightgrey',\r\n  display: 'flex',\r\n  padding: '20px 8px 8px 8px',\r\n  flexWrap: 'no-wrap',\r\n  overflow: 'auto',\r\n  width: '98vw',\r\n  height: '90vh',\r\n  border: '1px solid black',\r\n  alignSelf: 'center'\r\n});\r\n\r\nexport default class Board extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.itemIndex = 0\r\n    this.droppableNumber = 0\r\n    this.state = {\r\n      lists: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.props.boardInfo.lists && this.props.boardInfo.lists.length !== 0) {\r\n      let lists = this.props.boardInfo.lists\r\n      this.setState({ lists: lists})\r\n    }\r\n    listenForEnterKey(\"#list-name-input\", this.createNewList);\r\n    listenForEnterKey(\"#item-content-input\", this.addToList);\r\n  }\r\n\r\n  createNewList = (listName) => {\r\n    let listId = 'droppable' + this.droppableNumber\r\n    let items = []\r\n    let listArray = this.state.lists\r\n    let newList = { listName: listName, id: listId, items: items }\r\n    listArray.push(newList)\r\n\r\n    this.setState({ lists: listArray })\r\n\r\n    this.switchListPopup('none')\r\n    this.droppableNumber++\r\n  }\r\n\r\n  addToList = (listId, content) => {\r\n    let lists = this.state.lists\r\n    const result = lists.find(list => list.id === listId);\r\n    let items = result.items\r\n    items.push({ id: `item-${this.itemIndex}`, content: content })\r\n    this.itemIndex++\r\n    this.setState({ lists: lists.map(list => list.id === listId ? list = { ...list, items: items } : list) })\r\n\r\n    let itemPopupInput = document.getElementById('item-content-input')\r\n    itemPopupInput.value = ''\r\n  }\r\n\r\n  getList = (id) => {\r\n    let lists = this.state.lists\r\n    let result = lists.find(list => list.id === id);\r\n    return result\r\n  };\r\n\r\n  onDragEnd = (result) => {\r\n    if (result.type === 'COLUMN') {\r\n      // dropped outside the list\r\n      if (!result.destination) {\r\n        return;\r\n      }\r\n\r\n      const lists = reorder(\r\n        this.state.lists,\r\n        result.source.index,\r\n        result.destination.index\r\n      );\r\n\r\n      this.setState({\r\n        lists: lists\r\n      });\r\n    } else {\r\n      const { source, destination } = result;\r\n\r\n      // dropped outside the list\r\n      if (!destination) {\r\n        return;\r\n      }\r\n\r\n      if (source.droppableId === destination.droppableId) {\r\n        const items = reorder(\r\n          this.getList(source.droppableId),\r\n          source.index,\r\n          destination.index\r\n        );\r\n\r\n        this.setState({ lists: this.state.lists.map(list => list.id === source.droppableId ? list = { ...list, items: items } : list) })\r\n\r\n      } else {\r\n        const result = move(\r\n          this.getList(source.droppableId),\r\n          this.getList(destination.droppableId),\r\n          source,\r\n          destination\r\n        );\r\n\r\n        let destinationArray = []\r\n        for (let destResults of result[destination.droppableId]) {\r\n          destinationArray.push(destResults)\r\n        }\r\n\r\n        let sourceArray = []\r\n        for (let srcResults of result[source.droppableId]) {\r\n          sourceArray.push(srcResults)\r\n        }\r\n\r\n        this.setState({\r\n          lists: this.state.lists.map(list => list.id === source.droppableId ? list = { ...list, items: sourceArray } :\r\n            list.id === destination.droppableId ? list = { ...list, items: destinationArray } : list)\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  switchListPopup = (display) => {\r\n    let listPopup = document.getElementById('list-pop-up')\r\n    let listNameInput = document.getElementById('list-name-input')\r\n    if (display === 'none') {\r\n      listPopup.style = 'display: none;'\r\n      listNameInput.value = ''\r\n    } else {\r\n      this.switchItemPopup('none')\r\n      listPopup.style = 'display: block;'\r\n      this.props.setCaretPosition('list-name-input', 0)\r\n    }\r\n  }\r\n\r\n  switchItemPopup = (display, listName, listId) => {\r\n    let itemPopup = document.getElementById('item-pop-up')\r\n    let itemPopupInput = document.getElementById('item-content-input')\r\n    if (display === 'none') {\r\n      itemPopup.style = 'display: none;'\r\n      itemPopupInput.value = ''\r\n    } else {\r\n      this.switchListPopup('none')\r\n      let popupTitle = document.getElementById('item-popup-title')\r\n      popupTitle.textContent = listName\r\n      let idDiv = document.getElementById('list-id')\r\n      idDiv.textContent = listId\r\n      itemPopup.style = 'display: block;'\r\n      this.props.setCaretPosition('item-content-input', 0)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id='board-wrap'>\r\n        <button onClick={() => { this.switchListPopup('block') }}>Add list</button>\r\n        <button onClick={() => this.props.closeBoard(`${this.props.boardInfo.boardId}`, this.state.lists)} >Close board</button>\r\n        <button onClick={() => this.props.saveBoard(`${this.props.boardInfo.boardId}`, this.state.lists)} >Save board</button>\r\n        <span>{this.props.boardInfo.boardName}</span>\r\n        <DragDropContext onDragEnd={this.onDragEnd}>\r\n          <Droppable droppableId=\"droppable\" direction=\"horizontal\" type='COLUMN'>\r\n            {(provided, snapshot) => (\r\n              <div\r\n                id='board'\r\n                ref={provided.innerRef}\r\n                style={getListStyle(snapshot.isDraggingOver)}\r\n                {...provided.droppableProps}\r\n              >\r\n                {this.state.lists.map((list, index) => (\r\n                  <div className='list-wrap' key={list.id}>\r\n                    <Draggable draggableId={list.id} index={index}>\r\n                      {(provided, snapshot) => (\r\n                        <div\r\n                          className='list-style'\r\n                          ref={provided.innerRef}\r\n                          {...provided.draggableProps}\r\n                          {...provided.dragHandleProps}\r\n                          style={getItemStyle(\r\n                            snapshot.isDragging,\r\n                            provided.draggableProps.style\r\n                          )}\r\n                        >\r\n                          <InnerList popupSwitch={this.switchItemPopup} list={list} />\r\n                        </div>\r\n                      )}\r\n                    </Draggable>\r\n                  </div>\r\n                ))}\r\n                {provided.placeholder}\r\n              </div>\r\n            )}\r\n          </Droppable>\r\n        </DragDropContext>\r\n        <div id='list-pop-up' className='pop-ups'>\r\n          <button className='close-buttons' onClick={() => this.switchListPopup('none')}>X</button>\r\n          <br />\r\n          <input id='list-name-input' placeholder='Enter list name' />\r\n          <button onClick={() => this.createNewList(`${document.getElementById('list-name-input').value}`)}>Create List</button>\r\n        </div>\r\n        <div id='item-pop-up' className='pop-ups'>\r\n          <button className='close-buttons' onClick={() => this.switchItemPopup('none')}>X</button>\r\n          <br />\r\n          <div>Add item to <span id='item-popup-title'></span></div>\r\n          <div style={{ display: 'none' }} id='list-id'></div>\r\n          <input id='item-content-input' placeholder='Enter item content' />\r\n          <button onClick={() => this.addToList(document.getElementById('list-id').textContent, `${document.getElementById('item-content-input').value}`)}>Create Item</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport Board from './Board'\r\n\r\nconst setCaretPosition = (elemId, caretPos) => {\r\n  let elem = document.getElementById(elemId);\r\n  if (elem.createTextRange) {\r\n    let range = elem.createTextRange();\r\n    range.move('character', caretPos);\r\n    range.select();\r\n  } else {\r\n    elem.focus();\r\n    if (elem.selectionStart !== undefined) {\r\n      elem.setSelectionRange(caretPos, caretPos);\r\n    }\r\n  }\r\n}\r\n\r\nconst listenForEnterKey = (selector, callback) => {\r\n  document.querySelector(selector).addEventListener('keypress', function (e) {\r\n    if (e.key === 'Enter') {\r\n      let callbackValue = document.querySelector(selector).value\r\n      callback(callbackValue);\r\n    }\r\n  });\r\n}\r\n\r\nexport default class App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.boardNumber = 0\r\n    this.state = {\r\n      boards: [],\r\n      currentBoard: null\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (localStorage.getItem('boards')) {\r\n      let boards = JSON.parse(localStorage.getItem('boards'))\r\n      let lastBoardId = boards[boards.length - 1].boardId.slice(6)\r\n      this.boardNumber = parseInt(lastBoardId) + 1\r\n      this.setState({ boards: boards })\r\n    }\r\n    listenForEnterKey(\"#board-name-input\", this.createBoard);\r\n  }\r\n\r\n  createBoard = (name) => {\r\n    this.switchBoardPopup('none')\r\n    let boards = this.state.boards\r\n    let newBoard = { boardId: `board-${this.boardNumber}`, boardName: name, lists: null }\r\n    boards.push(newBoard)\r\n    this.setState({ boards: boards, currentBoard: newBoard })\r\n    this.boardNumber++\r\n  }\r\n\r\n  saveBoard = (id, lists) => {\r\n    let boards = this.state.boards\r\n    const result = boards.find(board => board.boardId === id);\r\n    result.lists = lists\r\n\r\n    console.log(result)\r\n    let savedBoards\r\n    if (localStorage.getItem('boards')) {\r\n      savedBoards = JSON.parse(localStorage.getItem('boards'))\r\n      for (let board of savedBoards) {\r\n        if (board.boardId === id) {\r\n          board = result\r\n        } else {\r\n          savedBoards.push(result)\r\n        }\r\n      }\r\n    } else {\r\n      savedBoards = this.state.boards\r\n    }\r\n    this.setState({ boards: this.state.boards.map((board) => board.boardId === id ? result : board) })\r\n    localStorage.setItem('boards', JSON.stringify(savedBoards))\r\n  }\r\n\r\n  loadBoard = (id) => {\r\n    let boards = this.state.boards\r\n    const result = boards.find(board => board.boardId === id);\r\n    this.setState({ currentBoard: result })\r\n  }\r\n\r\n  closeBoard = (id, lists) => {\r\n    let boards = this.state.boards\r\n    const result = boards.find(board => board.boardId === id);\r\n    result.lists = lists\r\n    this.setState({ boards: this.state.boards.map((board) => board.boardId === id ? result : board) })\r\n    this.setState({ currentBoard: null })\r\n  }\r\n\r\n  switchBoardPopup = (display) => {\r\n    let boardPopup = document.getElementById('board-pop-up')\r\n    let boardNameInput = document.getElementById('board-name-input')\r\n    if (display === 'none') {\r\n      boardPopup.style = 'display: none;'\r\n      boardNameInput.value = ''\r\n    } else {\r\n      boardPopup.style = 'display: block;'\r\n      setCaretPosition('board-name-input', 0)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (this.state.currentBoard) {\r\n      let board = this.state.currentBoard\r\n      return (\r\n        <Board closeBoard={this.closeBoard} saveBoard={this.saveBoard} boardInfo={board} setCaretPosition={setCaretPosition} />\r\n      )\r\n    } else {\r\n      let boards = this.state.boards.map((board) => {\r\n        return (\r\n          <div key={board.boardId} className='board-names' onClick={() => this.loadBoard(`${board.boardId}`)}>{board.boardName}</div>\r\n        )\r\n      })\r\n      return (\r\n        <div id='app'>\r\n          <h1>List-Maker</h1>\r\n          <div>\r\n            <h3>Boards</h3>\r\n            <div id='board-dropdown'>\r\n              {boards.length > 0 ? boards.map(board => board) : 'No boards'}\r\n            </div>\r\n          </div>\r\n          <div>\r\n            <button onClick={() => this.switchBoardPopup(`block`)}>Create board</button>\r\n          </div>\r\n          <div id='board-pop-up' className='pop-ups'>\r\n            <button className='close-buttons' onClick={() => this.switchBoardPopup('none')}>X</button>\r\n            <br />\r\n            <input id='board-name-input' placeholder='Enter board name' />\r\n            <button onClick={() => this.createBoard(`${document.getElementById('board-name-input').value}`)}>Create board</button>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}