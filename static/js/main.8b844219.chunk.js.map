{"version":3,"sources":["Components/Lists.js","Components/Board.js","serviceWorker.js","index.js"],"names":["Lists","_this","this","props","list","listId","id","listName","react_default","a","createElement","key","onClick","popupSwitch","react_beautiful_dnd_esm","droppableId","provided","snapshot","className","ref","innerRef","style","isDraggingOver","background","padding","width","minHeight","items","map","item","index","react","draggableId","Object","assign","draggableProps","dragHandleProps","isDragging","draggableStyle","objectSpread","userSelect","margin","border","content","placeholder","Component","listenForEnterKey","selector","callback","document","querySelector","addEventListener","e","callbackValue","value","callbackValue2","textContent","console","log","setCaretPosition","elemId","caretPos","element","getElementById","createTextRange","range","move","select","selectionStart","focus","setSelectionRange","reorder","startIndex","endIndex","result","_result$splice","Array","from","splice","removed","slicedToArray","source","destination","droppableSource","droppableDestination","sourceClone","destClone","_sourceClone$splice","Board","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","createNewList","droppableNumber","listArray","state","lists","newList","push","setState","id2List","defineProperty","switchListPopup","addToList","listFrom","find","concat","itemIndex","switchItemPopup","getList","onDragEnd","type","listTo","destinationArray","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","dresults","err","return","sourceArray","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","sresults","display","listPopup","listNameInput","itemPopup","itemPopupInput","_this2","direction","flexWrap","overflow","height","alignSelf","droppableProps","Lists_Lists","float","Boolean","window","location","hostname","match","ReactDOM","render","Board_Board","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8b844219.chunk.js","sourcesContent":["import React, { Fragment, Component } from 'react';\r\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n  // some basic styles to make the items look a bit nicer\r\n  userSelect: 'none',\r\n  padding: 16,\r\n  margin: `0 0 4px 0`,\r\n  border: '1px solid black',\r\n\r\n  // change background colour if dragging\r\n  background: isDragging ? 'lightgreen' : 'grey',\r\n\r\n  // styles we need to apply on draggables\r\n  ...draggableStyle\r\n});\r\n\r\nconst getListStyle = (isDraggingOver) => ({\r\n  background: isDraggingOver ? 'lightblue' : 'lightgrey',\r\n  padding: 8,\r\n  width: 250,\r\n  minHeight: 370\r\n});\r\n\r\nexport default class Lists extends Component {\r\n\r\n  render() {\r\n    if (this.props.list) {\r\n      let list = this.props.list\r\n      let listId = list.id\r\n      let listName = list.listName\r\n\r\n      return (\r\n        <div key={listId}>\r\n          <button onClick={() => { this.props.popupSwitch('block', listName) } }>Add to {listName}</button>\r\n          <h1>{listName}</h1>\r\n          <Droppable droppableId={listId}>\r\n            {(provided, snapshot) => (\r\n              <div\r\n                className='my-lists'\r\n                ref={provided.innerRef}\r\n                style={getListStyle(snapshot.isDraggingOver)}>\r\n                {list.items.map((item, index) => (\r\n                  <Fragment key={index}>\r\n                    {item ?\r\n                      <Draggable\r\n                        key={item.id}\r\n                        draggableId={item.id}\r\n                        index={index}>\r\n                        {(provided, snapshot) => (\r\n                          <div\r\n                            className='item-style'\r\n                            ref={provided.innerRef}\r\n                            {...provided.draggableProps}\r\n                            {...provided.dragHandleProps}\r\n                            style={getItemStyle(\r\n                              snapshot.isDragging,\r\n                              provided.draggableProps.style\r\n                            )}>\r\n                            {item.content}\r\n                          </div>\r\n                        )}\r\n                      </Draggable> : <div className='no-items'></div>}\r\n                  </Fragment>\r\n                ))}\r\n                {provided.placeholder}\r\n              </div>\r\n            )}\r\n          </Droppable>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}","import React, { Fragment, Component } from 'react';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport Lists from './Lists'\r\n\r\nfunction listenForEnterKey(selector, callback) {\r\n  document.querySelector(selector).addEventListener('keypress', function (e) {\r\n    if (e.key === 'Enter') {\r\n      let callbackValue\r\n      if (selector === '#list-name-input') {\r\n        callbackValue = document.querySelector(selector).value\r\n        callback(callbackValue);\r\n      } else {\r\n        callbackValue = document.querySelector(selector).value\r\n        let callbackValue2 = document.querySelector('#item-popup-title').textContent\r\n        console.log(callbackValue2, callbackValue)\r\n        callback(callbackValue2, callbackValue);\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nfunction setCaretPosition(elemId, caretPos) {\r\n  let element = document.getElementById(elemId);\r\n\r\n  if (element !== null) {\r\n\r\n    // element.value = element.value;\r\n\r\n    if (element.createTextRange) {\r\n      var range = element.createTextRange();\r\n      range.move('character', caretPos);\r\n      range.select();\r\n      return true;\r\n\r\n    } else {\r\n      // (el.selectionStart === 0 added for Firefox bug)\r\n      if (element.selectionStart || element.selectionStart === 0) {\r\n        element.focus();\r\n        element.setSelectionRange(caretPos, caretPos);\r\n        return true;\r\n\r\n      } else { // fail city, fortunately this never happens (as far as I've tested) :)\r\n        element.focus();\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n  let result\r\n  if (list.items) {\r\n    result = Array.from(list.items)\r\n  } else {\r\n    result = Array.from(list);\r\n  }\r\n  const [removed] = result.splice(startIndex, 1);\r\n  result.splice(endIndex, 0, removed);\r\n\r\n  return result;\r\n};\r\n\r\nconst move = (source, destination, droppableSource, droppableDestination) => {\r\n  const sourceClone = Array.from(source.items);\r\n  const destClone = Array.from(destination.items);\r\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n\r\n  destClone.splice(droppableDestination.index, 0, removed);\r\n\r\n  const result = {};\r\n  result[droppableSource.droppableId] = sourceClone;\r\n  result[droppableDestination.droppableId] = destClone;\r\n\r\n  return result;\r\n};\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n  // some basic styles to make the items look a bit nicer\r\n  userSelect: 'none',\r\n  padding: 10,\r\n  margin: `0 8px 0 0`,\r\n  overflow: 'auto',\r\n  height: '90%',\r\n  width: 280,\r\n  border: '1px solid black',\r\n\r\n  // change background colour if dragging\r\n  background: isDragging ? 'lightgreen' : 'grey',\r\n\r\n  // styles we need to apply on draggables\r\n  ...draggableStyle\r\n});\r\n\r\nconst getListStyle = (isDraggingOver) => ({\r\n  background: isDraggingOver ? 'lightblue' : 'lightgrey',\r\n  display: 'flex',\r\n  padding: 8,\r\n  flexWrap: 'no-wrap',\r\n  overflow: 'auto',\r\n  width: '98vw',\r\n  height: '90vh',\r\n  alignSelf: 'center'\r\n});\r\n\r\nexport default class Board extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.itemIndex = 0\r\n    this.droppableNumber = 0\r\n    this.id2List = {};\r\n    this.state = {\r\n      lists: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    listenForEnterKey(\"#list-name-input\", this.createNewList);\r\n    listenForEnterKey(\"#item-content-input\", this.addToList);\r\n  }\r\n\r\n  createNewList = (listName) => {\r\n    let listId = 'droppable' + this.droppableNumber\r\n    let items = []\r\n\r\n    let listArray = this.state.lists\r\n    let newList = { listName: listName, id: listId, items: items }\r\n    listArray.push(newList)\r\n\r\n    this.setState({ lists: listArray })\r\n    this.id2List = { ...this.id2List, [listId]: listName }\r\n\r\n    this.switchListPopup('none')\r\n    this.droppableNumber++\r\n  }\r\n\r\n  addToList = (listFrom, content) => {\r\n    let lists = this.state.lists\r\n    const result = lists.find(list => list.listName === listFrom);\r\n    let items = result.items\r\n    items.push({ id: `item-${this.itemIndex}`, content: content })\r\n    this.itemIndex++\r\n    this.setState({ lists: lists.map(list => list.listName === listFrom ? list = { ...list, items: items } : list) })\r\n    this.switchItemPopup('none')\r\n  }\r\n\r\n  getList = (id) => {\r\n    let lists = this.state.lists\r\n    let listFrom = this.id2List[id]\r\n    let result = lists.find(list => list.listName === listFrom);\r\n    return result\r\n  };\r\n\r\n  onDragEnd = (result) => {\r\n    if (result.type === 'COLUMN') {\r\n      // dropped outside the list\r\n      if (!result.destination) {\r\n        return;\r\n      }\r\n\r\n      const lists = reorder(\r\n        this.state.lists,\r\n        result.source.index,\r\n        result.destination.index\r\n      );\r\n\r\n      this.setState({\r\n        lists: lists\r\n      });\r\n    } else {\r\n      const { source, destination } = result;\r\n\r\n      // dropped outside the list\r\n      if (!destination) {\r\n        return;\r\n      }\r\n\r\n      if (source.droppableId === destination.droppableId) {\r\n        const items = reorder(\r\n          this.getList(source.droppableId),\r\n          source.index,\r\n          destination.index\r\n        );\r\n\r\n        let listFrom = this.id2List[source.droppableId]\r\n        this.setState({ lists: this.state.lists.map(list => list.listName === listFrom ? list = { ...list, items: items } : list) })\r\n\r\n      } else {\r\n        const result = move(\r\n          this.getList(source.droppableId),\r\n          this.getList(destination.droppableId),\r\n          source,\r\n          destination\r\n        );\r\n\r\n        let listFrom = this.id2List[source.droppableId]\r\n        let listTo = this.id2List[destination.droppableId]\r\n\r\n        let destinationArray = []\r\n        for (let dresults of result[destination.droppableId]) {\r\n          destinationArray.push(dresults)\r\n        }\r\n\r\n        let sourceArray = []\r\n        for (let sresults of result[source.droppableId]) {\r\n          sourceArray.push(sresults)\r\n        }\r\n\r\n        this.setState({\r\n          lists: this.state.lists.map(list => list.listName === listFrom ? list = { ...list, items: sourceArray } :\r\n            list.listName === listTo ? list = { ...list, items: destinationArray } : list)\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  switchListPopup = (display) => {\r\n    let listPopup = document.getElementById('list-pop-up')\r\n    let listNameInput = document.getElementById('list-name-input')\r\n    if (display === 'none') {\r\n      listPopup.style = 'display: none;'\r\n      listNameInput.value = ''\r\n    } else {\r\n      this.switchItemPopup('none')\r\n      listPopup.style = 'display: block;'\r\n      setCaretPosition('list-name-input', 0)\r\n    }\r\n  }\r\n\r\n  switchItemPopup = (display, listName) => {\r\n    let itemPopup = document.getElementById('item-pop-up')\r\n    let itemPopupInput = document.getElementById('item-content-input')\r\n    if (display === 'none') {\r\n      itemPopup.style = 'display: none;'\r\n      itemPopupInput.value = ''\r\n    } else {\r\n      this.switchListPopup('none')\r\n      let popupTitle = document.getElementById('item-popup-title')\r\n      popupTitle.textContent = listName\r\n      itemPopup.style = 'display: block;'\r\n      setCaretPosition('item-content-input', 0)\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <Fragment>\r\n        <button onClick={() => { this.switchListPopup('block') }}>Add list</button>\r\n        <DragDropContext onDragEnd={this.onDragEnd}>\r\n          <Droppable droppableId=\"droppable\" direction=\"horizontal\" type='COLUMN'>\r\n            {(provided, snapshot) => (\r\n              <div\r\n                ref={provided.innerRef}\r\n                style={getListStyle(snapshot.isDraggingOver)}\r\n                {...provided.droppableProps}\r\n              >\r\n                {this.state.lists.map((list, index) => (\r\n                  <div className='list-wrap' key={list.id}>\r\n                    <Draggable draggableId={list.id} index={index}>\r\n                      {(provided, snapshot) => (\r\n                        <div\r\n                          className='list-style'\r\n                          ref={provided.innerRef}\r\n                          {...provided.draggableProps}\r\n                          {...provided.dragHandleProps}\r\n                          style={getItemStyle(\r\n                            snapshot.isDragging,\r\n                            provided.draggableProps.style\r\n                          )}\r\n                        >\r\n                          <Lists popupSwitch={this.switchItemPopup} list={list} />\r\n                        </div>\r\n                      )}\r\n                    </Draggable>\r\n                  </div>\r\n                ))}\r\n                {provided.placeholder}\r\n              </div>\r\n            )}\r\n          </Droppable>\r\n        </DragDropContext>\r\n        <div id='list-pop-up'>\r\n          <button style={{ float: 'right' }} onClick={() => this.switchListPopup('none')}>X</button>\r\n          <br />\r\n          <input id='list-name-input' placeholder='Enter list name' />\r\n          <button onClick={() => this.createNewList(`${document.getElementById('list-name-input').value}`)}>Create List</button>\r\n        </div>\r\n        <div id='item-pop-up'>\r\n          <button style={{ float: 'right' }} onClick={() => this.switchItemPopup('none')}>X</button>\r\n          <br />\r\n          <div>Add item to <span id='item-popup-title'></span></div>\r\n          <input id='item-content-input' placeholder='Enter item content' />\r\n          <button onClick={() => this.addToList(document.getElementById('item-popup-title').textContent, `${document.getElementById('item-content-input').value}`)}>Create Item</button>\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Board from './Components/Board'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Board />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}