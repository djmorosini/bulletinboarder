{"version":3,"sources":["Components/App.js","Components/SomeLists.js","Components/Board.js","Examples/QuoteItem.js","Examples/QuoteList.js","Examples/Column.js","Examples/TheBoard.js","newC/Lists.js","newC/NewApp.js","serviceWorker.js","Examples/data.js","index.js"],"names":["getItems","count","offset","arguments","length","undefined","Array","from","v","k","map","id","concat","content","reorder","list","startIndex","endIndex","result","_result$splice","splice","removed","Object","slicedToArray","newItemIndex","listNumber","droppableNumber","startAt","move","source","destination","droppableSource","droppableDestination","sourceClone","destClone","_sourceClone$splice","index","droppableId","Component","SomeLists","state","newlist0","id2List","droppable1","createNewList","listName","listId","items","_this","setState","objectSpread","defineProperty","addToList","push","getList","onDragEnd","listFrom","_this$setState3","listTo","_this2","this","theLists","lists","entries","react_default","a","createElement","key","onClick","props","react_beautiful_dnd_esm","provided","snapshot","ref","innerRef","style","isDraggingOver","background","padding","width","item","draggableId","assign","draggableProps","dragHandleProps","isDragging","draggableStyle","userSelect","grid","margin","placeholder","display","createLists","SomeLists_SomeLists","console","log","numLists","getStyle","overflow","QuoteItem","_this$props","quote","isGroupedOver","href","author","url","React","PureComponent","InnerQuoteList","nextProps","quotes","QuoteItem_QuoteItem","Boolean","combineTargetFor","InnerList","dropProvided","title","QuoteList_InnerQuoteList","QuoteList","_this$props2","ignoreContainerClipping","internalScroll","isDropDisabled","scrollContainerStyle","isCombineEnabled","listType","type","droppableProps","QuoteList_InnerList","defaultProps","Column","QuoteList_QuoteList","isScrollable","reorderQuoteMap","quoteMap","current","toConsumableArray","reordered","columns","initial","ordered","keys","combine","shallow","column","withQuoteRemoved","data","containerHeight","board","direction","Column_Column","withScrollableColumns","Lists","className","react","NewApp","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","listArray","newList","find","destinationArray","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","dresults","value","err","return","sourceArray","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","sresults","droppable2","Lists_Lists","window","location","hostname","match","jake","name","avatarUrl","BMO","finn","princess","authors","reduce","previous","filter","getByAuthor","ReactDOM","render","NewApp_NewApp","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2a57948f.chunk.js","sourcesContent":["import React, { Fragment, Component } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n\n// fake data generator\nconst getItems = (count, offset = 0) =>\n    Array.from({ length: count }, (v, k) => k).map(k => ({\n        id: `item-${k + offset}`,\n        content: `item ${k + offset}`\n    }));\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n\n    return result;\n};\n\nlet newItemIndex = 0\nlet listNumber = 1\nlet droppableNumber = 2\nlet startAt = 5\n\n/**\n * Moves an item from one list to another list.\n */\nconst move = (source, destination, droppableSource, droppableDestination) => {\n    const sourceClone = Array.from(source);\n    const destClone = Array.from(destination);\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\n\n    destClone.splice(droppableDestination.index, 0, removed);\n\n    const result = {};\n    result[droppableSource.droppableId] = sourceClone;\n    result[droppableDestination.droppableId] = destClone;\n\n    return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n    // some basic styles to make the items look a bit nicer\n    userSelect: 'none',\n    padding: grid * 2,\n    margin: `0 0 ${grid}px 0`,\n\n    // change background colour if dragging\n    background: isDragging ? 'lightgreen' : 'grey',\n\n    // styles we need to apply on draggables\n    ...draggableStyle\n});\n\nconst getListStyle = isDraggingOver => ({\n    background: isDraggingOver ? 'lightblue' : 'lightgrey',\n    padding: grid,\n    width: 250\n});\n\nexport default class App extends Component {\n    state = {\n        newlist0: getItems(5)\n    };\n\n    /**\n     * A semi-generic way to handle multiple lists. Matches\n     * the IDs of the droppable container to the names of the\n     * source arrays stored in the state.\n     */\n    id2List = {\n        droppable1: 'newlist0',\n    };\n\n    createNewList = listName => {\n        let listId = 'droppable' + droppableNumber\n        let items = getItems(1, startAt)\n\n        this.setState({ ...this.state, [listName]: items })\n        this.id2List = { ...this.id2List, [listId]: listName }\n\n        droppableNumber++\n        startAt++\n        listNumber++\n    }\n\n    addToList = listName => {\n        newItemIndex++\n        let items = this.state[listName]\n        items.push({ id: `new-item-${newItemIndex}`, content: `new content ${newItemIndex}` })\n        this.setState({ [listName]: items })\n    }\n\n    getList = id => this.state[this.id2List[id]];\n\n    onDragEnd = result => {\n        console.log(result)\n        const { source, destination } = result;\n\n        // dropped outside the list\n        if (!destination) {\n            return;\n        }\n\n        if (source.droppableId === destination.droppableId) {\n            const items = reorder(\n                this.getList(source.droppableId),\n                source.index,\n                destination.index\n            );\n\n            let listFrom = this.id2List[source.droppableId]\n            this.setState({\n                [listFrom]: items,\n            })\n\n        } else {\n            const result = move(\n                this.getList(source.droppableId),\n                this.getList(destination.droppableId),\n                source,\n                destination\n            );\n\n            let listFrom = this.id2List[source.droppableId]\n            let listTo = this.id2List[destination.droppableId]\n\n            this.setState({\n                [listFrom]: result[source.droppableId],\n                [listTo]: result[destination.droppableId]\n            })\n        }\n    };\n\n    render() {\n\n        let theLists = this.state\n        theLists = Object.entries(theLists);\n\n        const lists = theLists.map((list, index) => {\n            let listName = Object.entries(this.id2List)\n            let listId = list[0]\n            listName = listName[index][0]\n\n            return (\n                <div key={listId}>\n                    <button onClick={() => { this.addToList(`${listId}`) }}>Add to list {listId}</button>\n                    <h1>{listId}</h1>\n                    <Droppable droppableId={listName}>\n                        {(provided, snapshot) => (\n                            <div\n                                ref={provided.innerRef}\n                                style={getListStyle(snapshot.isDraggingOver)}>\n                                {this.state[listId].map((item, index) => (\n                                    <Draggable\n                                        key={item.id}\n                                        draggableId={item.id}\n                                        index={index}>\n                                        {(provided, snapshot) => (\n                                            <div\n                                                ref={provided.innerRef}\n                                                {...provided.draggableProps}\n                                                {...provided.dragHandleProps}\n                                                style={getItemStyle(\n                                                    snapshot.isDragging,\n                                                    provided.draggableProps.style\n                                                )}>\n                                                {item.content}\n                                            </div>\n                                        )}\n                                    </Draggable>\n                                ))}\n                                {provided.placeholder}\n                            </div>\n                        )}\n                    </Droppable>\n                </div>\n            );\n        });\n\n        return (\n            <Fragment>\n                <button onClick={() => { this.createNewList(`newlist${listNumber}`) }}>Add list</button>\n                <DragDropContext onDragEnd={this.onDragEnd}>\n                    <div style={{ display: 'flex' }}>\n                        {lists}\n                    </div>\n                </DragDropContext>\n            </Fragment>\n        );\n    }\n}","import React, { Component } from 'react';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\n\r\n// fake data generator\r\nconst getItems = (count, offset = 0) =>\r\n    Array.from({ length: count }, (v, k) => k).map(k => ({\r\n        id: `item-${k + offset}`,\r\n        content: `item ${k + offset}`\r\n    }));\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n    const result = Array.from(list);\r\n    const [removed] = result.splice(startIndex, 1);\r\n    result.splice(endIndex, 0, removed);\r\n\r\n    return result;\r\n};\r\n\r\nlet newItemIndex = 0\r\nlet droppableNumber = 2\r\nlet startAt = 5\r\n\r\n/**\r\n * Moves an item from one list to another list.\r\n */\r\nconst move = (source, destination, droppableSource, droppableDestination) => {\r\n    const sourceClone = Array.from(source);\r\n    const destClone = Array.from(destination);\r\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n\r\n    destClone.splice(droppableDestination.index, 0, removed);\r\n\r\n    const result = {};\r\n    result[droppableSource.droppableId] = sourceClone;\r\n    result[droppableDestination.droppableId] = destClone;\r\n\r\n    return result;\r\n};\r\n\r\nconst grid = 8;\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n    // some basic styles to make the items look a bit nicer\r\n    userSelect: 'none',\r\n    padding: grid * 2,\r\n    margin: `0 0 ${grid}px 0`,\r\n\r\n    // change background colour if dragging\r\n    background: isDragging ? 'lightgreen' : 'grey',\r\n\r\n    // styles we need to apply on draggables\r\n    ...draggableStyle\r\n});\r\n\r\nconst getListStyle = isDraggingOver => ({\r\n    background: isDraggingOver ? 'lightblue' : 'lightgrey',\r\n    padding: grid,\r\n    width: 250\r\n});\r\n\r\nexport default class SomeLists extends Component {\r\n    state = {\r\n        newlist0: getItems(5),\r\n    };\r\n\r\n    /**\r\n     * A semi-generic way to handle multiple lists. Matches\r\n     * the IDs of the droppable container to the names of the\r\n     * source arrays stored in the state.\r\n     */\r\n    id2List = {\r\n        droppable1: 'newlist0',\r\n    };\r\n\r\n    createNewList = listName => {\r\n        let listId = 'droppable' + droppableNumber\r\n        let items = getItems(1, startAt)\r\n\r\n        this.setState({ ...this.state, [listName]: items })\r\n        this.id2List = { ...this.id2List, [listId]: listName }\r\n\r\n        droppableNumber++\r\n        startAt++\r\n    }\r\n\r\n    addToList = listName => {\r\n        newItemIndex++\r\n        let items = this.state[listName]\r\n        items.push({ id: `new-item-${newItemIndex}`, content: `new content ${newItemIndex}` })\r\n        this.setState({ [listName]: items })\r\n    }\r\n\r\n    getList = id => this.state[this.id2List[id]];\r\n\r\n    onDragEnd = result => {\r\n\r\n        const { source, destination } = result;\r\n\r\n        // dropped outside the list\r\n        if (!destination) {\r\n            return;\r\n        }\r\n\r\n        if (source.droppableId === destination.droppableId) {\r\n            const items = reorder(\r\n                this.getList(source.droppableId),\r\n                source.index,\r\n                destination.index\r\n            );\r\n\r\n            let listFrom = this.id2List[source.droppableId]\r\n            this.setState({\r\n                [listFrom]: items,\r\n            })\r\n\r\n        } else {\r\n            const result = move(\r\n                this.getList(source.droppableId),\r\n                this.getList(destination.droppableId),\r\n                source,\r\n                destination\r\n            );\r\n\r\n            let listFrom = this.id2List[source.droppableId]\r\n            let listTo = this.id2List[destination.droppableId]\r\n\r\n            this.setState({\r\n                [listFrom]: result[source.droppableId],\r\n                [listTo]: result[destination.droppableId]\r\n            })\r\n        }\r\n    };\r\n\r\n    render() {\r\n\r\n        let theLists = this.state\r\n        theLists = Object.entries(theLists);\r\n\r\n        const lists = theLists.map((list, index) => {\r\n            let listName = Object.entries(this.id2List)\r\n            let listId = list[0]\r\n            listName = listName[index][0]\r\n\r\n            return (\r\n                <div key={listId}>\r\n                    <button onClick={() => { this.addToList(`${listId}`) }}>Add to list {this.props.id}</button>\r\n                    <h1>List {this.props.id}</h1>\r\n                    <Droppable droppableId={listName}>\r\n                        {(provided, snapshot) => (\r\n                            <div\r\n                                ref={provided.innerRef}\r\n                                style={getListStyle(snapshot.isDraggingOver)}>\r\n                                {this.state[listId].map((item, index) => (\r\n                                    <Draggable\r\n                                        key={item.id}\r\n                                        draggableId={item.id}\r\n                                        index={index}>\r\n                                        {(provided, snapshot) => (\r\n                                            <div\r\n                                                ref={provided.innerRef}\r\n                                                {...provided.draggableProps}\r\n                                                {...provided.dragHandleProps}\r\n                                                style={getItemStyle(\r\n                                                    snapshot.isDragging,\r\n                                                    provided.draggableProps.style\r\n                                                )}>\r\n                                                {item.content}\r\n                                            </div>\r\n                                        )}\r\n                                    </Draggable>\r\n                                ))}\r\n                                {provided.placeholder}\r\n                            </div>\r\n                        )}\r\n                    </Droppable>\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n                <DragDropContext key={this.props.id} onDragEnd={this.onDragEnd}>\r\n                    <div style={{ display: 'flex' }}>\r\n                        {lists}\r\n                    </div>\r\n                </DragDropContext>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\n\r\nimport SomeLists from './SomeLists'\r\n\r\nconst createLists = (count, offset = 0) =>\r\n  Array.from({ length: count }, (v, k) => k).map(k => ({\r\n    id: `item-${k + offset}`,\r\n    content: <SomeLists id={(k + offset)}/>\r\n  }));\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n  const result = Array.from(list);\r\n  console.log(result)\r\n  const [removed] = result.splice(startIndex, 1);\r\n  result.splice(endIndex, 0, removed);\r\n\r\n  return result;\r\n};\r\n\r\nconst grid = 8;\r\n\r\nlet numLists = 2\r\n\r\nconst getStyle = isDraggingOver => ({\r\n  background: isDraggingOver ? 'lightblue' : 'lightgrey',\r\n  display: 'flex',\r\n  padding: grid,\r\n  overflow: 'hidden',\r\n});\r\n\r\nexport default class HorizontalList extends Component {\r\n  state = {\r\n    items: createLists(1),\r\n  };\r\n\r\n  onDragEnd = result => {\r\n    // dropped outside the list\r\n    if (!result.destination) {\r\n      return;\r\n    }\r\n\r\n    const items = reorder(\r\n      this.state.items,\r\n      result.source.index,\r\n      result.destination.index\r\n    );\r\n\r\n    this.setState({\r\n      items,\r\n    });\r\n  }\r\n\r\n  addList = () => {\r\n    this.setState({...this.state.items, items: createLists(`${numLists}`)})\r\n    numLists++\r\n  }\r\n\r\n  // Normally you would want to split things out into separate components.\r\n  // But in this example everything is just done in one place for simplicity\r\n  render() {\r\n    console.log(createLists(2))\r\n    return (\r\n      <DragDropContext onDragEnd={this.onDragEnd}>\r\n      <button onClick={() => { this.addList() }}>Add list</button>\r\n        <Droppable droppableId=\"droppable\" direction=\"horizontal\">\r\n          {(provided, snapshot) => (\r\n            <div\r\n              ref={provided.innerRef}\r\n              style={getStyle(snapshot.isDraggingOver)}\r\n              {...provided.droppableProps}\r\n            >\r\n              {this.state.items.map((list, index) => (\r\n                <Draggable key={list.id} draggableId={list.id} index={index}>\r\n                  {(provided, snapshot) => (\r\n                    <div\r\n                      ref={provided.innerRef}\r\n                      {...provided.draggableProps}\r\n                      {...provided.dragHandleProps}\r\n                      style={getStyle(\r\n                        snapshot.isDragging,\r\n                        provided.draggableProps.style\r\n                      )}\r\n                    >\r\n                      {list.content}\r\n                    </div>\r\n                  )}\r\n                </Draggable>\r\n              ))}\r\n              {provided.placeholder}\r\n            </div>\r\n          )}\r\n        </Droppable>\r\n      </DragDropContext>\r\n    );\r\n  }\r\n}","// @flow\r\nimport React, { Component } from 'react';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\n\r\n\r\nconst getBackgroundColor = (isDragging, isGroupedOver) => {\r\n  if (isDragging) {\r\n    return 'green';\r\n  }\r\n\r\n  if (isGroupedOver) {\r\n    return 'gray';\r\n  }\r\n\r\n  return 'white';\r\n};\r\n\r\n// const ContainerStyle = `\r\n//   border-radius: ${2}px;\r\n//   border: 1px solid grey;\r\n//   background-color: ${props =>\r\n//     getBackgroundColor(props.isDragging, props.isGroupedOver)};\r\n//   box-shadow: ${({ isDragging }) =>\r\n//     isDragging ? `2px 2px 1px black` : 'none'};\r\n//   padding: ${8}px;\r\n//   min-height: 40px;\r\n//   margin-bottom: ${8}px;\r\n//   user-select: none;\r\n\r\n//   /* anchor overrides */\r\n//   color: black;\r\n\r\n//   &:hover,\r\n//   &:active {\r\n//     color: black;\r\n//     text-decoration: none;\r\n//   }\r\n\r\n//   &:focus {\r\n//     outline: 2px solid purple;\r\n//     box-shadow: none;\r\n//   }\r\n\r\n//   /* flexbox */\r\n//   display: flex;\r\n//   align-items: center;\r\n// `;\r\n\r\n// const ContentStyle = `\r\n//   /* flex child */\r\n//   flex-grow: 1;\r\n//   /*\r\n//     Needed to wrap text in ie11\r\n//     https://stackoverflow.com/questions/35111090/why-ie11-doesnt-wrap-the-text-in-flexbox\r\n//   */\r\n//   flex-basis: 100%;\r\n//   /* flex parent */\r\n//   display: flex;\r\n//   flex-direction: column;\r\n// `;\r\n\r\n// const BlockQuoteStyle = `\r\n//   &::before {\r\n//     content: open-quote;\r\n//   }\r\n//   &::after {\r\n//     content: close-quote;\r\n//   }\r\n// `;\r\n\r\n// const FooterStyle = `\r\n//   display: flex;\r\n//   margin-top: ${8}px;\r\n// `;\r\n\r\n// const QuoteIdStyle = `\r\n//   flex-grow: 0;\r\n//   margin: 0;\r\n// `;\r\n\r\n// const AttributionStyle = `\r\n//   margin: 0;\r\n//   margin-left: ${8}px;\r\n//   text-align: right;\r\n//   flex-grow: 1;\r\n// `;\r\n\r\n// Previously this extended React.Component\r\n// That was a good thing, because using React.PureComponent can hide\r\n// issues with the selectors. However, moving it over does can considerable\r\n// performance improvements when reordering big lists (400ms => 200ms)\r\n// Need to be super sure we are not relying on PureComponent here for\r\n// things we should be doing in the selector as we do not know if consumers\r\n// will be using PureComponent\r\nexport default class QuoteItem extends React.PureComponent {\r\n  render() {\r\n    const { quote, isDragging, isGroupedOver, provided } = this.props;\r\n\r\n    return (\r\n      <a\r\n        href={quote.author.url}\r\n        isDragging={isDragging}\r\n        isGroupedOver={isGroupedOver}\r\n        innerRef={provided.innerRef}\r\n        {...provided.draggableProps}\r\n        {...provided.dragHandleProps}\r\n      >\r\n        <div>\r\n          <div>{quote.content}</div>\r\n          <div>\r\n            <small>({quote.id})</small>\r\n            <small>TEMP</small>\r\n          </div>\r\n        </div>\r\n      </a>\r\n    );\r\n  }\r\n}","// @flow\r\nimport React, { Component } from 'react';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport QuoteItem from './QuoteItem';\r\n\r\n// const WrapperStyle = `\r\n//   background-color: ${({ isDraggingOver }) =>\r\n//     isDraggingOver ? 'lightblue' : 'blue'};\r\n//   display: flex;\r\n//   flex-direction: column;\r\n//   opacity: ${({ isDropDisabled }) => (isDropDisabled ? 0.5 : 'inherit')};\r\n//   padding: ${8}px;\r\n//   border: ${8}px;\r\n//   padding-bottom: 0;\r\n//   transition: background-color 0.1s ease, opacity 0.1s ease;\r\n//   user-select: none;\r\n//   width: 250px;\r\n// `;\r\n\r\n// const scrollContainerHeight = 250;\r\n\r\n// const dropzoneStyle = `\r\n//   /* stop the list collapsing when empty */\r\n//   min-height: ${scrollContainerHeight}px;\r\n//   /*\r\n//     not relying on the items for a margin-bottom\r\n//     as it will collapse when the list is empty\r\n//   */\r\n//   margin-bottom: ${8}px;\r\n// `;\r\n\r\n// const ScrollContainerStyle = `\r\n//   overflow-x: hidden;\r\n//   overflow-y: auto;\r\n//   max-height: ${scrollContainerHeight}px;\r\n// `;\r\n\r\nclass InnerQuoteList extends Component {\r\n  shouldComponentUpdate(nextProps) {\r\n    if (nextProps.quotes !== this.props.quotes) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  render() {\r\n    return this.props.quotes.map((quote, index) => (\r\n      <Draggable key={quote.id} draggableId={quote.id} index={index}>\r\n      {(provided, snapshot) => (\r\n          <QuoteItem\r\n            key={quote.id}\r\n            quote={quote}\r\n            isDragging={snapshot.isDragging}\r\n            isGroupedOver={Boolean(snapshot.combineTargetFor)}\r\n            provided={provided}\r\n          />\r\n        )}\r\n      </Draggable>\r\n    ));\r\n  }\r\n}\r\n\r\n\r\nclass InnerList extends Component {\r\n  render() {\r\n    const { quotes, dropProvided } = this.props;\r\n    const title = this.props.title ? <div>{this.props.title}</div> : null;\r\n\r\n    return (\r\n      <div>\r\n        {title}\r\n        <div innerRef={dropProvided.innerRef}>\r\n          <InnerQuoteList quotes={quotes} />\r\n          {dropProvided.placeholder}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default class QuoteList extends Component {\r\n  static defaultProps = {\r\n    listId: 'LIST',\r\n  };\r\n  render() {\r\n    const {\r\n      ignoreContainerClipping,\r\n      internalScroll,\r\n      scrollContainerStyle,\r\n      isDropDisabled,\r\n      isCombineEnabled,\r\n      listId,\r\n      listType,\r\n      style,\r\n      quotes,\r\n      title,\r\n    } = this.props;\r\n\r\n    return (\r\n      <Droppable\r\n        droppableId={listId}\r\n        type={listType}\r\n        ignoreContainerClipping={ignoreContainerClipping}\r\n        isDropDisabled={isDropDisabled}\r\n        isCombineEnabled={isCombineEnabled}\r\n      >\r\n      {(provided, snapshot) => (\r\n          <div\r\n            isDraggingOver={snapshot.isDraggingOver}\r\n            isDropDisabled={isDropDisabled}\r\n            {...provided.droppableProps}\r\n          >\r\n            {internalScroll ? (\r\n              <div>\r\n                <InnerList\r\n                  quotes={quotes}\r\n                  title={title}\r\n                  dropProvided={provided}\r\n                />\r\n              </div>\r\n            ) : (\r\n              <InnerList\r\n                quotes={quotes}\r\n                title={title}\r\n                dropProvided={provided}\r\n              />\r\n            )}\r\n          </div>\r\n        )}\r\n      </Droppable>\r\n    );\r\n  }\r\n}","// @flow\r\nimport React, { Component } from 'react';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport QuoteList from './QuoteList'\r\n\r\n// const ContainerStyle = {\r\n//   margin: '8px',\r\n//   display: 'flex',\r\n// };\r\n\r\n// const HeaderStyle = `\r\n//   display: flex;\r\n//   align-items: center;\r\n//   justify-content: center;\r\n//   border-top-left-radius: ${2}px;\r\n//   border-top-right-radius: ${2}px;\r\n//   background-color: ${({ isDragging }) =>\r\n//     isDragging ? 'lightblue' : 'blue'};\r\n//   transition: background-color 0.1s ease;\r\n//   &:hover {\r\n//     background-color: 'lightblue';\r\n//   }\r\n// `;\r\n\r\nexport default class Column extends Component {\r\n  render() {\r\n    const title = this.props.title;\r\n    const quotes = this.props.quotes;\r\n    const index = this.props.index;\r\n    return (\r\n      <Draggable draggableId={title} index={index}>\r\n        {(provided, snapshot) => (\r\n          <div innerRef={provided.innerRef} {...provided.draggableProps}>\r\n            <div isDragging={snapshot.isDragging}>\r\n              <div\r\n                isDragging={snapshot.isDragging}\r\n                {...provided.dragHandleProps}\r\n              >\r\n                {title}\r\n              </div>\r\n            </div>\r\n            <QuoteList\r\n              listId={title}\r\n              listType=\"QUOTE\"\r\n              quotes={quotes}\r\n              internalScroll={this.props.isScrollable}\r\n              isCombineEnabled={Boolean(this.props.isCombineEnabled)}\r\n            />\r\n          </div>\r\n        )}\r\n      </Draggable>\r\n    );\r\n  }\r\n}","// @flow\r\nimport React, { Component } from 'react';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport Column from './Column';\r\n\r\nconst reorder = (list, startIndex, endIndex) => {\r\n  const result = Array.from(list);\r\n  const [removed] = result.splice(startIndex, 1);\r\n  result.splice(endIndex, 0, removed);\r\n\r\n  return result;\r\n};\r\n\r\nconst reorderQuoteMap = (quoteMap, source, destination) => {\r\n  const current = [...quoteMap[source.droppableId]];\r\n  const next = [...quoteMap[destination.droppableId]];\r\n  const target = current[source.index];\r\n\r\n  // moving to same list\r\n  if (source.droppableId === destination.droppableId) {\r\n    const reordered = reorder(\r\n      current,\r\n      source.index,\r\n      destination.index,\r\n    );\r\n    const result = {\r\n      ...quoteMap,\r\n      [source.droppableId]: reordered,\r\n    };\r\n    return {\r\n      quoteMap: result,\r\n    };\r\n  }\r\n}\r\n\r\n// const ParentContainerStyle = `\r\n//   height: ${({ height }) => height};\r\n//   overflow-x: hidden;\r\n//   overflow-y: auto;\r\n// `;\r\n\r\n// const ContainerStyle = `\r\n//   min-height: 100vh;\r\n//   /* like display:flex but will allow bleeding over the window width */\r\n//   min-width: 100vw;\r\n//   display: inline-flex;\r\n// `;\r\n\r\nexport default class Board extends Component {\r\n  /* eslint-disable react/sort-comp */\r\n  static defaultProps = {\r\n    isCombineEnabled: false,\r\n  };\r\n\r\n  state = {\r\n    columns: this.props.initial,\r\n    ordered: Object.keys(this.props.initial),\r\n  };\r\n\r\n\r\n  onDragEnd = (result) => {\r\n    if (result.combine) {\r\n      if (result.type === 'COLUMN') {\r\n        const shallow = [...this.state.ordered];\r\n        shallow.splice(result.source.index, 1);\r\n        this.setState({ ordered: shallow });\r\n        return;\r\n      }\r\n\r\n      const column = this.state.columns[result.source.droppableId];\r\n      const withQuoteRemoved = [...column];\r\n      withQuoteRemoved.splice(result.source.index, 1);\r\n      const columns = {\r\n        ...this.state.columns,\r\n        [result.source.droppableId]: withQuoteRemoved,\r\n      };\r\n      this.setState({ columns });\r\n      return;\r\n    }\r\n\r\n    // dropped nowhere\r\n    if (!result.destination) {\r\n      return;\r\n    }\r\n\r\n    const source = result.source;\r\n    const destination = result.destination;\r\n\r\n    // did not move anywhere - can bail early\r\n    if (\r\n      source.droppableId === destination.droppableId &&\r\n      source.index === destination.index\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    // reordering column\r\n    if (result.type === 'COLUMN') {\r\n      const ordered = reorder(\r\n        this.state.ordered,\r\n        source.index,\r\n        destination.index,\r\n      );\r\n\r\n      this.setState({\r\n        ordered,\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    const data = reorderQuoteMap({\r\n      quoteMap: this.state.columns,\r\n      source,\r\n      destination,\r\n    });\r\n\r\n    this.setState({\r\n      columns: data.quoteMap,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const columns = this.state.columns;\r\n    const ordered = this.state.ordered;\r\n    const { containerHeight } = this.props;\r\n\r\n    const board = (\r\n      <Droppable\r\n        droppableId=\"board\"\r\n        type=\"COLUMN\"\r\n        direction=\"horizontal\"\r\n        ignoreContainerClipping={Boolean(containerHeight)}\r\n        isCombineEnabled={this.props.isCombineEnabled}\r\n      >\r\n        {(provided) => (\r\n          <div innerRef={provided.innerRef} {...provided.droppableProps}>\r\n            {ordered.map((key, index) => (\r\n              <Column\r\n                key={key}\r\n                index={index}\r\n                title={key}\r\n                quotes={columns[key]}\r\n                isScrollable={this.props.withScrollableColumns}\r\n                isCombineEnabled={this.props.isCombineEnabled}\r\n              />\r\n            ))}\r\n          </div>\r\n        )}\r\n      </Droppable>\r\n    );\r\n\r\n    return (\r\n      <DragDropContext onDragEnd={this.onDragEnd}>\r\n        {containerHeight ? (\r\n          <div>{board}</div>\r\n        ) : (\r\n            board\r\n          )}\r\n      </DragDropContext>\r\n    );\r\n  }\r\n}","import React, { Fragment, Component } from 'react';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\n\r\nconst grid = 8;\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n  // some basic styles to make the items look a bit nicer\r\n  userSelect: 'none',\r\n  padding: grid * 2,\r\n  margin: `0 ${grid}px 0 0`,\r\n\r\n  // change background colour if dragging\r\n  background: isDragging ? 'lightgreen' : 'grey',\r\n\r\n  // styles we need to apply on draggables\r\n  ...draggableStyle\r\n});\r\n\r\nconst getListStyle = isDraggingOver => ({\r\n  background: isDraggingOver ? 'lightblue' : 'lightgrey',\r\n  display: 'flex',\r\n  padding: grid\r\n});\r\n\r\nexport default class Lists extends Component {\r\n  \r\n  render() {\r\n    if (this.props.list) {\r\n      let list = this.props.list\r\n      let listId = list.id\r\n      let listName = list.listName\r\n\r\n      return (\r\n        <div key={listId}>\r\n          <button onClick={() => { this.props.addToList(`${listId}`) }}>Add to list {listName}</button>\r\n          <h1>{listName}</h1>\r\n          <Droppable droppableId={listId}>\r\n            {(provided, snapshot) => (\r\n              <div\r\n              className='my-lists'\r\n                ref={provided.innerRef}\r\n                style={getListStyle(snapshot.isDraggingOver)}>\r\n                {list.items.map((item, index) => (\r\n                  <Fragment>\r\n                    {item ?\r\n                  <Draggable\r\n                    key={item ? item.id : index}\r\n                    draggableId={item ? item.id : index}\r\n                    index={index}>\r\n                    {(provided, snapshot) => (\r\n                      <div\r\n                      className='item-style'\r\n                        ref={provided.innerRef}\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}\r\n                        style={getItemStyle(\r\n                          snapshot.isDragging,\r\n                          provided.draggableProps.style\r\n                        )}>\r\n                        {item.content}\r\n                      </div>\r\n                    )}\r\n                  </Draggable> : <div></div>}\r\n                  </Fragment>\r\n                ))}\r\n                {provided.placeholder}\r\n              </div>\r\n            )}\r\n          </Droppable>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}","import React, { Fragment, Component } from 'react';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport Lists from './Lists'\r\n\r\n// fake data generator\r\nconst getItems = (count, offset = 0) =>\r\n  Array.from({ length: count }, (v, k) => k).map(k => ({\r\n    id: `item-${k + offset}`,\r\n    content: `item ${k + offset}`\r\n  }));\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n  const result = Array.from(list);\r\n  const [removed] = result.splice(startIndex, 1);\r\n  result.splice(endIndex, 0, removed);\r\n\r\n  return result;\r\n};\r\n\r\nconst move = (source, destination, droppableSource, droppableDestination) => {\r\n  console.log(source)\r\n  const sourceClone = Array.from(source.items);\r\n  const destClone = Array.from(destination.items);\r\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n\r\n  destClone.splice(droppableDestination.index, 0, removed);\r\n\r\n  const result = {};\r\n  result[droppableSource.droppableId] = sourceClone;\r\n  result[droppableDestination.droppableId] = destClone;\r\n\r\n  return result;\r\n};\r\n\r\nlet newItemIndex = 0\r\nlet listNumber = 2\r\nlet droppableNumber = 3\r\nlet startAt = 3\r\n\r\nconst grid = 8;\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n  // some basic styles to make the items look a bit nicer\r\n  userSelect: 'none',\r\n  padding: grid * 2,\r\n  margin: `0 ${grid}px 0 0`,\r\n\r\n  // change background colour if dragging\r\n  background: isDragging ? 'lightgreen' : 'grey',\r\n\r\n  // styles we need to apply on draggables\r\n  ...draggableStyle\r\n});\r\n\r\nconst getListStyle = isDraggingOver => ({\r\n  background: isDraggingOver ? 'lightblue' : 'lightgrey',\r\n  display: 'flex',\r\n  padding: grid\r\n});\r\n\r\nexport default class NewApp extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.id2List = {\r\n      droppable1: 'newList0',\r\n      droppable2: 'newList1'\r\n    };\r\n    this.state = {\r\n      lists: [\r\n        { listName: 'newList0', id: 'droppable1', items: [{ id: `item-0`, content: `item 0` }, { id: `item-1`, content: `item 1` }] },\r\n        { listName: 'newList1', id: 'droppable2', items: [{ id: `item-2`, content: `item 2` }] }\r\n      ]\r\n    };\r\n  }\r\n\r\n  createNewList = listName => {\r\n    let listId = 'droppable' + droppableNumber\r\n    let items = getItems(1, startAt)\r\n\r\n    let listArray = this.state.lists\r\n    let newList = { listName: listName, id: listId, items: items }\r\n    listArray.push(newList)\r\n\r\n    this.setState({ lists: listArray })\r\n    this.id2List = { ...this.id2List, [listId]: listName }\r\n\r\n    droppableNumber++\r\n    startAt++\r\n    listNumber++\r\n  }\r\n\r\n  addToList = listFrom => {\r\n    newItemIndex++\r\n    listFrom = this.id2List[listFrom]\r\n    let lists = this.state.lists\r\n    const result = lists.find(list => list.listName === listFrom);\r\n    let items = result.items\r\n    items.push({ id: `new-item-${newItemIndex}`, content: `new content ${newItemIndex}` })\r\n    this.setState({ lists: lists.map(list => list.listName === listFrom ? Object.assign({ items: items }, list) : list) })\r\n  }\r\n\r\n  getList = id => {\r\n    let lists = this.state.lists\r\n    let listFrom = this.id2List[id]\r\n    let result = lists.find(list => list.listName === listFrom);\r\n    console.log(result)\r\n    return result\r\n  };\r\n\r\n  onDragEnd = (result) => {\r\n    if (result.type == 'COLUMN') {\r\n      // dropped outside the list\r\n      if (!result.destination) {\r\n        return;\r\n      }\r\n\r\n      const lists = reorder(\r\n        this.state.lists,\r\n        result.source.index,\r\n        result.destination.index\r\n      );\r\n\r\n      this.setState({\r\n        lists: lists\r\n      });\r\n    } else {\r\n      const { source, destination } = result;\r\n      console.log(source, destination)\r\n\r\n      // dropped outside the list\r\n      if (!destination) {\r\n        return;\r\n      }\r\n\r\n      if (source.droppableId === destination.droppableId) {\r\n        const items = reorder(\r\n          this.getList(source.droppableId),\r\n          source.index,\r\n          destination.index\r\n        );\r\n\r\n        let listFrom = this.id2List[source.droppableId]\r\n        console.log(this.state.lists.map(list => list.listName == listFrom ? Object.assign({ items: items }, list) : list))\r\n        this.setState({ lists: this.state.lists.map(list => list.listName == listFrom ? Object.assign({ items: items }, list) : list) })\r\n\r\n      } else {\r\n        const result = move(\r\n          this.getList(source.droppableId),\r\n          this.getList(destination.droppableId),\r\n          source,\r\n          destination\r\n        );\r\n\r\n        let listFrom = this.id2List[source.droppableId]\r\n        let listTo = this.id2List[destination.droppableId]\r\n\r\n        let destinationArray = []\r\n        for (let dresults of result[destination.droppableId]) {\r\n          destinationArray.push(dresults)\r\n        }\r\n\r\n        let sourceArray = []\r\n        for (let sresults of result[source.droppableId]) {\r\n          sourceArray.push(sresults)\r\n        }\r\n\r\n        console.log(destinationArray, sourceArray)\r\n\r\n        this.setState({\r\n          lists: this.state.lists.map(list => list.listName == listFrom ? list = {...list, items: sourceArray } :\r\n            list.listName == listTo ? list = {...list, items: destinationArray } : list)\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  // Normally you would want to split things out into separate components.\r\n  // But in this example everything is just done in one place for simplicity\r\n  render() {\r\n\r\n    return (\r\n      <Fragment>\r\n        <button onClick={() => { this.createNewList(`newlist${listNumber}`) }}>Add list</button>\r\n        <DragDropContext onDragEnd={this.onDragEnd}>\r\n          <Droppable droppableId=\"droppable\" direction=\"horizontal\" type='COLUMN'>\r\n            {(provided, snapshot) => (\r\n              <div\r\n                ref={provided.innerRef}\r\n                style={getListStyle(snapshot.isDraggingOver)}\r\n                {...provided.droppableProps}\r\n              >\r\n                {this.state.lists.map((list, index) => (\r\n                  <div className='list-wrap' key={list.id}>\r\n                    <Draggable draggableId={list.id} index={index}>\r\n                      {(provided, snapshot) => (\r\n                        <div\r\n                          className='list-style'\r\n                          ref={provided.innerRef}\r\n                          {...provided.draggableProps}\r\n                          {...provided.dragHandleProps}\r\n                          style={getItemStyle(\r\n                            snapshot.isDragging,\r\n                            provided.draggableProps.style\r\n                          )}\r\n                        >\r\n                          <Lists addToList={this.addToList} list={list} />\r\n                        </div>\r\n                      )}\r\n                    </Draggable>\r\n                  </div>\r\n                ))}\r\n                {provided.placeholder}\r\n              </div>\r\n            )}\r\n          </Droppable>\r\n        </DragDropContext>\r\n      </Fragment>\r\n    );\r\n  }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const jake = {\r\n  id: '1',\r\n  name: 'Jake',\r\n  url: 'http://adventuretime.wikia.com/wiki/Jake',\r\n  avatarUrl: 'https://68.media.tumblr.com/avatar_1f7bdbbeb59c_128.png',\r\n};\r\n\r\nconst BMO = {\r\n  id: '2',\r\n  name: 'BMO',\r\n  url: 'http://adventuretime.wikia.com/wiki/BMO',\r\n  avatarUrl: 'https://68.media.tumblr.com/avatar_1a34fe6de498_128.png',\r\n};\r\n\r\nconst finn = {\r\n  id: '3',\r\n  name: 'Finn',\r\n  url: 'http://adventuretime.wikia.com/wiki/Finn',\r\n  avatarUrl: 'https://68.media.tumblr.com/avatar_09404f3287c6_128.png',\r\n};\r\n\r\nconst princess = {\r\n  id: '4',\r\n  name: 'Princess bubblegum',\r\n  url: 'http://adventuretime.wikia.com/wiki/Princess_Bubblegum',\r\n  avatarUrl: 'https://68.media.tumblr.com/avatar_ec98529441c4_128.png',\r\n};\r\n\r\nexport const authors = [jake, BMO, finn, princess];\r\n\r\nexport const quotes = [\r\n  {\r\n    id: '1',\r\n    content: 'Sometimes life is scary and dark',\r\n    author: BMO,\r\n  },\r\n  {\r\n    id: '2',\r\n    content:\r\n      'Sucking at something is the first step towards being sorta good at something.',\r\n    author: jake,\r\n  },\r\n  {\r\n    id: '3',\r\n    content: \"You got to focus on what's real, man\",\r\n    author: jake,\r\n  },\r\n  {\r\n    id: '4',\r\n    content: 'Is that where creativity comes from? From sad biz?',\r\n    author: finn,\r\n  },\r\n  {\r\n    id: '5',\r\n    content: 'Homies help homies. Always',\r\n    author: finn,\r\n  },\r\n  {\r\n    id: '6',\r\n    content: 'Responsibility demands sacrifice',\r\n    author: princess,\r\n  },\r\n  {\r\n    id: '7',\r\n    content: \"That's it! The answer was so simple, I was too smart to see it!\",\r\n    author: princess,\r\n  },\r\n  {\r\n    id: '8',\r\n    content: 'People make mistakes. It’s a part of growing up',\r\n    author: finn,\r\n  },\r\n  {\r\n    id: '9',\r\n    content: \"Don't you always call sweatpants 'give up on life pants,' Jake?\",\r\n    author: finn,\r\n  },\r\n  {\r\n    id: '10',\r\n    content: 'I should not have drunk that much tea!',\r\n    author: princess,\r\n  },\r\n  {\r\n    id: '11',\r\n    content: 'Please! I need the real you!',\r\n    author: princess,\r\n  },\r\n  {\r\n    id: '12',\r\n    content: \"Haven't slept for a solid 83 hours, but, yeah, I'm good.\",\r\n    author: princess,\r\n  },\r\n];\r\n\r\nlet idCount = 0;\r\n\r\nexport const getQuotes = (count) =>\r\n  Array.from({ length: count }, (v, k) => k).map(() => {\r\n    const random = quotes[Math.floor(Math.random() * quotes.length)];\r\n\r\n    const custom = {\r\n      id: `quote-${idCount++}`,\r\n      content: random.content,\r\n      author: random.author,\r\n    };\r\n\r\n    return custom;\r\n  });\r\n\r\nexport const getAuthors = (count) =>\r\n  Array.from({ length: count }, (v, k) => k).map(() => {\r\n    const random = authors[Math.floor(Math.random() * authors.length)];\r\n\r\n    const custom = {\r\n      id: `author-${idCount++}`,\r\n      name: random.name,\r\n      avatarUrl: random.avatarUrl,\r\n      url: random.url,\r\n    };\r\n\r\n    return custom;\r\n  });\r\n\r\nconst getByAuthor = (author, items) =>\r\n  items.filter((quote) => quote.author === author);\r\n\r\nexport const authorQuoteMap = authors.reduce(\r\n  (previous, author) => ({\r\n    ...previous,\r\n    [author.name]: getByAuthor(author, quotes),\r\n  }),\r\n  {},\r\n);\r\n\r\nexport const generateQuoteMap = (quoteCount) =>\r\n  authors.reduce(\r\n    (previous, author) => ({\r\n      ...previous,\r\n      [author.name]: getQuotes(quoteCount / authors.length),\r\n    }),\r\n    {},\r\n  );","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport Board from './Components/Board'\nimport OtherBoard from './Examples/TheBoard'\nimport NewApp from './newC/NewApp'\nimport * as serviceWorker from './serviceWorker';\nimport { authorQuoteMap } from './Examples/data'\n\nReactDOM.render(<NewApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}