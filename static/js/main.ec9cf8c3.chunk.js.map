{"version":3,"sources":["Components/InnerList.js","Components/Board.js","Components/App.js","serviceWorker.js","index.js"],"names":["InnerList","_this","this","list","props","listId","id","listName","react_default","a","createElement","key","onClick","popupSwitch","className","deleteList","react_beautiful_dnd_esm","droppableId","provided","snapshot","ref","innerRef","style","isDraggingOver","background","padding","width","height","border","overflow","items","map","item","index","react","draggableId","Object","assign","draggableProps","dragHandleProps","isDragging","draggableStyle","objectSpread","userSelect","margin","deleteItem","content","placeholder","Component","listenForEnterKey","selector","callback","document","querySelector","addEventListener","e","callbackValue","value","textContent","reorder","startIndex","endIndex","result","_result$splice","Array","from","splice","removed","slicedToArray","move","source","destination","droppableSource","droppableDestination","sourceClone","destClone","_sourceClone$splice","Board","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","lists","filter","setState","createNewList","droppableNumber","listArray","newList","push","switchListPopup","itemId","find","updatedList","addToList","concat","itemIndex","getElementById","getList","onDragEnd","type","destinationArray","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","destResults","err","return","sourceArray","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","srcResults","display","listPopup","listNameInput","switchItemPopup","setCaretPosition","itemPopup","itemPopupInput","boardInfo","length","_this2","closeBoard","boardId","saveBoard","boardName","direction","flexWrap","alignSelf","droppableProps","InnerList_InnerList","elemId","caretPos","elem","createTextRange","range","select","focus","selectionStart","setSelectionRange","App","createBoard","name","switchBoardPopup","boards","newBoard","boardNumber","currentBoard","savedBoards","board","JSON","parse","localStorage","getItem","setItem","stringify","loadBoard","deleteBoard","console","log","boardPopup","boardNameInput","lastBoardId","slice","parseInt","Board_Board","Boolean","window","location","hostname","match","ReactDOM","render","App_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ec9cf8c3.chunk.js","sourcesContent":["import React, { Fragment, Component } from 'react';\r\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n  // some basic styles to make the items look a bit nicer\r\n  userSelect: 'none',\r\n  padding: '16px',\r\n  margin: `0 0 4px 0`,\r\n  border: '1px solid black',\r\n  width: '200px',\r\n\r\n  // change background colour if dragging\r\n  background: isDragging ? 'lightgreen' : 'grey',\r\n\r\n  // styles we need to apply on draggables\r\n  ...draggableStyle\r\n});\r\n\r\nconst getListStyle = (isDraggingOver) => ({\r\n  background: isDraggingOver ? 'lightblue' : 'lightgrey',\r\n  padding: '8px',\r\n  width: '250px',\r\n  height: '370px',\r\n  border: '1px solid black',\r\n  overflow: 'auto'\r\n});\r\n\r\nexport default class InnerList extends Component {\r\n\r\n  render() {\r\n    let list = this.props.list\r\n    let listId = list.id\r\n    let listName = list.listName\r\n\r\n    return (\r\n      <div key={listId}>\r\n        <button onClick={() => { this.props.popupSwitch('block', listName, listId) }}>Add to {listName}</button>\r\n        <button className='close-buttons' onClick={() => { this.props.deleteList(listId) }}>X</button>\r\n        <h1>{listName}</h1>\r\n        <Droppable droppableId={listId}>\r\n          {(provided, snapshot) => (\r\n            <div\r\n              className='my-lists'\r\n              ref={provided.innerRef}\r\n              style={getListStyle(snapshot.isDraggingOver)}>\r\n              {list.items.map((item, index) => (\r\n                <Fragment key={index}>\r\n                  {item ?\r\n                    <Draggable\r\n                      key={item.id}\r\n                      draggableId={item.id}\r\n                      index={index}>\r\n                      {(provided, snapshot) => (\r\n                        <div\r\n                          className='item-style'\r\n                          ref={provided.innerRef}\r\n                          {...provided.draggableProps}\r\n                          {...provided.dragHandleProps}\r\n                          style={getItemStyle(\r\n                            snapshot.isDragging,\r\n                            provided.draggableProps.style\r\n                          )}>\r\n                          <button className='close-buttons' onClick={() => { this.props.deleteItem(listId, item.id) }}>X</button>\r\n                          {item.content}\r\n                        </div>\r\n                      )}\r\n                    </Draggable> : <div className='no-items'></div>}\r\n                </Fragment>\r\n              ))}\r\n              {provided.placeholder}\r\n            </div>\r\n          )}\r\n        </Droppable>\r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport InnerList from './InnerList'\r\n\r\nconst listenForEnterKey = (selector, callback) => {\r\n  document.querySelector(selector).addEventListener('keypress', function (e) {\r\n    if (e.key === 'Enter') {\r\n      let callbackValue = document.querySelector(selector).value\r\n      if (selector === '#list-name-input') {\r\n        callback(callbackValue);\r\n      } else {\r\n        let listId = document.querySelector('#list-id').textContent\r\n        callback(listId, callbackValue);\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n  let result\r\n  if (list.items) {\r\n    result = Array.from(list.items)\r\n  } else {\r\n    result = Array.from(list);\r\n  }\r\n  const [removed] = result.splice(startIndex, 1);\r\n  result.splice(endIndex, 0, removed);\r\n\r\n  return result;\r\n};\r\n\r\nconst move = (source, destination, droppableSource, droppableDestination) => {\r\n  const sourceClone = Array.from(source.items);\r\n  const destClone = Array.from(destination.items);\r\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n\r\n  destClone.splice(droppableDestination.index, 0, removed);\r\n\r\n  const result = {};\r\n  result[droppableSource.droppableId] = sourceClone;\r\n  result[droppableDestination.droppableId] = destClone;\r\n\r\n  return result;\r\n};\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n  // some basic styles to make the items look a bit nicer\r\n  userSelect: 'none',\r\n  padding: '10px 10px 0 15px',\r\n  margin: `0 8px 0 0`,\r\n  height: '95%',\r\n  width: '280px',\r\n  border: '1px solid black',\r\n\r\n  // change background colour if dragging\r\n  background: isDragging ? 'lightgreen' : 'grey',\r\n\r\n  // styles we need to apply on draggables\r\n  ...draggableStyle\r\n});\r\n\r\nconst getListStyle = (isDraggingOver) => ({\r\n  background: isDraggingOver ? 'lightblue' : 'lightgrey',\r\n  display: 'flex',\r\n  padding: '20px 8px 8px 8px',\r\n  flexWrap: 'no-wrap',\r\n  overflow: 'auto',\r\n  width: '98vw',\r\n  height: '90vh',\r\n  border: '1px solid black',\r\n  alignSelf: 'center'\r\n});\r\n\r\nexport default class Board extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.itemIndex = 0\r\n    this.droppableNumber = 0\r\n    this.state = {\r\n      lists: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.props.boardInfo.lists && this.props.boardInfo.lists.length !== 0) {\r\n      let lists = this.props.boardInfo.lists\r\n      this.setState({ lists: lists})\r\n    }\r\n    listenForEnterKey(\"#list-name-input\", this.createNewList);\r\n    listenForEnterKey(\"#item-content-input\", this.addToList);\r\n  }\r\n\r\n  deleteList = (id) => {\r\n    let lists = this.state.lists\r\n    const result = lists.filter(list => list.id !== id)\r\n    this.setState({ lists: result })\r\n  }\r\n\r\n  createNewList = (listName) => {\r\n    let listId = 'droppable' + this.droppableNumber\r\n    let items = []\r\n    let listArray = this.state.lists\r\n    let newList = { listName: listName, id: listId, items: items }\r\n    listArray.push(newList)\r\n\r\n    this.setState({ lists: listArray })\r\n\r\n    this.switchListPopup('none')\r\n    this.droppableNumber++\r\n  }\r\n\r\n  deleteItem = (listId, itemId) => {\r\n    let lists = this.state.lists\r\n    const result = lists.find(list => list.id === listId)\r\n    let updatedList = result.items.filter(item => item.id !== itemId)\r\n    result.items = updatedList\r\n    this.setState({ lists: lists.map(list => list.id === listId ? result : list) })\r\n  }\r\n\r\n  addToList = (listId, content) => {\r\n    let lists = this.state.lists\r\n    const result = lists.find(list => list.id === listId);\r\n    let items = result.items\r\n    items.push({ id: `item-${this.itemIndex}`, content: content })\r\n    this.itemIndex++\r\n    this.setState({ lists: lists.map(list => list.id === listId ? list = { ...list, items: items } : list) })\r\n\r\n    let itemPopupInput = document.getElementById('item-content-input')\r\n    itemPopupInput.value = ''\r\n  }\r\n\r\n  getList = (id) => {\r\n    let lists = this.state.lists\r\n    let result = lists.find(list => list.id === id);\r\n    return result\r\n  };\r\n\r\n  onDragEnd = (result) => {\r\n    if (result.type === 'COLUMN') {\r\n      // dropped outside the list\r\n      if (!result.destination) {\r\n        return;\r\n      }\r\n\r\n      const lists = reorder(\r\n        this.state.lists,\r\n        result.source.index,\r\n        result.destination.index\r\n      );\r\n\r\n      this.setState({\r\n        lists: lists\r\n      });\r\n    } else {\r\n      const { source, destination } = result;\r\n\r\n      // dropped outside the list\r\n      if (!destination) {\r\n        return;\r\n      }\r\n\r\n      if (source.droppableId === destination.droppableId) {\r\n        const items = reorder(\r\n          this.getList(source.droppableId),\r\n          source.index,\r\n          destination.index\r\n        );\r\n\r\n        this.setState({ lists: this.state.lists.map(list => list.id === source.droppableId ? list = { ...list, items: items } : list) })\r\n\r\n      } else {\r\n        const result = move(\r\n          this.getList(source.droppableId),\r\n          this.getList(destination.droppableId),\r\n          source,\r\n          destination\r\n        );\r\n\r\n        let destinationArray = []\r\n        for (let destResults of result[destination.droppableId]) {\r\n          destinationArray.push(destResults)\r\n        }\r\n\r\n        let sourceArray = []\r\n        for (let srcResults of result[source.droppableId]) {\r\n          sourceArray.push(srcResults)\r\n        }\r\n\r\n        this.setState({\r\n          lists: this.state.lists.map(list => list.id === source.droppableId ? list = { ...list, items: sourceArray } :\r\n            list.id === destination.droppableId ? list = { ...list, items: destinationArray } : list)\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  switchListPopup = (display) => {\r\n    let listPopup = document.getElementById('list-pop-up')\r\n    let listNameInput = document.getElementById('list-name-input')\r\n    if (display === 'none') {\r\n      listPopup.style = 'display: none;'\r\n      listNameInput.value = ''\r\n    } else {\r\n      this.switchItemPopup('none')\r\n      listPopup.style = 'display: block;'\r\n      this.props.setCaretPosition('list-name-input', 0)\r\n    }\r\n  }\r\n\r\n  switchItemPopup = (display, listName, listId) => {\r\n    let itemPopup = document.getElementById('item-pop-up')\r\n    let itemPopupInput = document.getElementById('item-content-input')\r\n    if (display === 'none') {\r\n      itemPopup.style = 'display: none;'\r\n      itemPopupInput.value = ''\r\n    } else {\r\n      this.switchListPopup('none')\r\n      let popupTitle = document.getElementById('item-popup-title')\r\n      popupTitle.textContent = listName\r\n      let idDiv = document.getElementById('list-id')\r\n      idDiv.textContent = listId\r\n      itemPopup.style = 'display: block;'\r\n      this.props.setCaretPosition('item-content-input', 0)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id='board-wrap'>\r\n        <button onClick={() => { this.switchListPopup('block') }}>Add list</button>\r\n        <button onClick={() => this.props.closeBoard(`${this.props.boardInfo.boardId}`, this.state.lists)} >Close board</button>\r\n        <button onClick={() => this.props.saveBoard(`${this.props.boardInfo.boardId}`, this.state.lists)} >Save board</button>\r\n        <span>{this.props.boardInfo.boardName}</span>\r\n        <DragDropContext onDragEnd={this.onDragEnd}>\r\n          <Droppable droppableId=\"droppable\" direction=\"horizontal\" type='COLUMN'>\r\n            {(provided, snapshot) => (\r\n              <div\r\n                id='board'\r\n                ref={provided.innerRef}\r\n                style={getListStyle(snapshot.isDraggingOver)}\r\n                {...provided.droppableProps}\r\n              >\r\n                {this.state.lists.map((list, index) => (\r\n                  <div className='list-wrap' key={list.id}>\r\n                    <Draggable draggableId={list.id} index={index}>\r\n                      {(provided, snapshot) => (\r\n                        <div\r\n                          className='list-style'\r\n                          ref={provided.innerRef}\r\n                          {...provided.draggableProps}\r\n                          {...provided.dragHandleProps}\r\n                          style={getItemStyle(\r\n                            snapshot.isDragging,\r\n                            provided.draggableProps.style\r\n                          )}\r\n                        >\r\n                          <InnerList deleteList={this.deleteList} deleteItem={this.deleteItem} popupSwitch={this.switchItemPopup} list={list} />\r\n                        </div>\r\n                      )}\r\n                    </Draggable>\r\n                  </div>\r\n                ))}\r\n                {provided.placeholder}\r\n              </div>\r\n            )}\r\n          </Droppable>\r\n        </DragDropContext>\r\n        <div id='list-pop-up' className='pop-ups'>\r\n          <button className='close-buttons' onClick={() => this.switchListPopup('none')}>X</button>\r\n          <br />\r\n          <input id='list-name-input' placeholder='Enter list name' />\r\n          <button onClick={() => this.createNewList(`${document.getElementById('list-name-input').value}`)}>Create List</button>\r\n        </div>\r\n        <div id='item-pop-up' className='pop-ups'>\r\n          <button className='close-buttons' onClick={() => this.switchItemPopup('none')}>X</button>\r\n          <br />\r\n          <div>Add item to <span id='item-popup-title'></span></div>\r\n          <div style={{ display: 'none' }} id='list-id'></div>\r\n          <input id='item-content-input' placeholder='Enter item content' />\r\n          <button onClick={() => this.addToList(document.getElementById('list-id').textContent, `${document.getElementById('item-content-input').value}`)}>Create Item</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport Board from './Board'\r\n\r\nconst setCaretPosition = (elemId, caretPos) => {\r\n  let elem = document.getElementById(elemId);\r\n  if (elem.createTextRange) {\r\n    let range = elem.createTextRange();\r\n    range.move('character', caretPos);\r\n    range.select();\r\n  } else {\r\n    elem.focus();\r\n    if (elem.selectionStart !== undefined) {\r\n      elem.setSelectionRange(caretPos, caretPos);\r\n    }\r\n  }\r\n}\r\n\r\nconst listenForEnterKey = (selector, callback) => {\r\n  document.querySelector(selector).addEventListener('keypress', function (e) {\r\n    if (e.key === 'Enter') {\r\n      let callbackValue = document.querySelector(selector).value\r\n      callback(callbackValue);\r\n    }\r\n  });\r\n}\r\n\r\nexport default class App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.boardNumber = 0\r\n    this.state = {\r\n      boards: [],\r\n      currentBoard: null\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (JSON.parse(localStorage.getItem('boards')) && JSON.parse(localStorage.getItem('boards')).length > 0) {\r\n      let boards = JSON.parse(localStorage.getItem('boards'))\r\n      let lastBoardId = boards[boards.length - 1].boardId.slice(6)\r\n      this.boardNumber = parseInt(lastBoardId) + 1\r\n      this.setState({ boards: boards })\r\n    }\r\n  }\r\n\r\n  createBoard = (name) => {\r\n    this.switchBoardPopup('none')\r\n    let boards = this.state.boards\r\n    let newBoard = { boardId: `board-${this.boardNumber}`, boardName: name, lists: null }\r\n    boards.push(newBoard)\r\n    this.setState({ boards: boards, currentBoard: newBoard })\r\n    this.boardNumber++\r\n  }\r\n\r\n  saveBoard = (id, lists) => {\r\n    let boards = this.state.boards\r\n    const result = boards.find(board => board.boardId === id);\r\n    result.lists = lists\r\n\r\n    let savedBoards\r\n    if (JSON.parse(localStorage.getItem('boards')) && JSON.parse(localStorage.getItem('boards')).length > 0) {\r\n      savedBoards = JSON.parse(localStorage.getItem('boards'))\r\n      for (let board of savedBoards) {\r\n        if (board.boardId === id) {\r\n          board = result\r\n        }\r\n      }\r\n    } else {\r\n      savedBoards = this.state.boards.map((board) => board.boardId === id ? result : board)\r\n    }\r\n    \r\n    this.setState({ boards: savedBoards })\r\n    localStorage.setItem('boards', JSON.stringify(savedBoards))\r\n  }\r\n\r\n  loadBoard = (id) => {\r\n    let boards = this.state.boards\r\n    const result = boards.find(board => board.boardId === id);\r\n    this.setState({ currentBoard: result })\r\n  }\r\n\r\n  closeBoard = (id, lists) => {\r\n    let boards = this.state.boards\r\n    const result = boards.find(board => board.boardId === id);\r\n    result.lists = lists\r\n    this.setState({ boards: this.state.boards.map((board) => board.boardId === id ? result : board) })\r\n    this.setState({ currentBoard: null })\r\n  }\r\n\r\n  deleteBoard = (id) => {\r\n    let boards = this.state.boards\r\n    const result = boards.filter(board => board.boardId !== id)\r\n    console.log(result)\r\n    this.setState({ boards: result })\r\n    localStorage.setItem('boards', JSON.stringify(result))\r\n  }\r\n\r\n  switchBoardPopup = (display) => {\r\n    let boardPopup = document.getElementById('board-pop-up')\r\n    let boardNameInput = document.getElementById('board-name-input')\r\n    if (display === 'none') {\r\n      boardPopup.style = 'display: none;'\r\n      boardNameInput.value = ''\r\n    } else {\r\n      listenForEnterKey(\"#board-name-input\", this.createBoard);\r\n      boardPopup.style = 'display: block;'\r\n      setCaretPosition('board-name-input', 0)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (this.state.currentBoard) {\r\n      let board = this.state.currentBoard\r\n      return (\r\n        <Board closeBoard={this.closeBoard} saveBoard={this.saveBoard} boardInfo={board} setCaretPosition={setCaretPosition} />\r\n      )\r\n    } else {\r\n      let boards = this.state.boards.map((board) => {\r\n        return (\r\n          <div className='board-names-wrap' key={board.boardId}>\r\n            <div className='board-names' onClick={() => this.loadBoard(`${board.boardId}`)}>\r\n              {board.boardName}\r\n            </div>\r\n            <button className='close-buttons' onClick={() => { this.deleteBoard(board.boardId) }}>X</button>\r\n          </div>\r\n        )\r\n      })\r\n      return (\r\n        <div id='app'>\r\n          <h1>List-Maker</h1>\r\n          <div>\r\n            <h3>Boards</h3>\r\n            <div id='board-dropdown'>\r\n              {boards.length > 0 ? boards.map(board => board) : 'No boards'}\r\n            </div>\r\n          </div>\r\n          <div>\r\n            <button onClick={() => this.switchBoardPopup(`block`)}>Create board</button>\r\n          </div>\r\n          <div id='board-pop-up' className='pop-ups'>\r\n            <button className='close-buttons' onClick={() => this.switchBoardPopup('none')}>X</button>\r\n            <br />\r\n            <input id='board-name-input' placeholder='Enter board name' />\r\n            <button onClick={() => this.createBoard(`${document.getElementById('board-name-input').value}`)}>Create board</button>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}